<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JVM系列[1]-Java类的生命周期]]></title>
      <url>http://www.yangbing.club/2018/04/15/talk-about-java-class-lifecycle/</url>
      <content type="html"><![CDATA[<p>原本是想写一篇关于Java类加载机制的博文，后来发现这个主题有点大，其中涉及的细节点太多，一篇博文，三言两语恐怕无法讲明白，于是乎决定从整体到局部，先来谈谈类的生命周期，从整体把握一个类从“出生”到“凋亡”的过程，其中涉及了类加载、使用、卸载等各个阶段，有了整体的认知后，再深入细节并结合具体实例，探讨加载原理、类加载器等相关知识。今天就让博主带领你开启第一段旅程：类的生命周期详解。</p>
<a id="more"></a>
<h1 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h1><p>类的生命周期是指一个class从加载到内存直至卸载出内存的过程，共包含<strong>加载</strong>（Loading）、<strong>验证</strong>（Verification）、<strong>准备</strong>（Preparation）、<strong>解析</strong>（Resolution）、<strong>初始化</strong>（Initialization）、<strong>使用</strong>（Using）和<strong>卸载</strong>（Unloading）7个阶段，如下图所示：</p>
<p><img src="/2018/04/15/talk-about-java-class-lifecycle/class lifeCycle.png" alt="Java类的生命周期"></p>
<p>其中验证、准备、解析三个阶段统称为<strong>连接</strong>（Linking），而加载、连接、初始化又可以统称为<strong>类加载的过程</strong>，所以我们有时又可以称类的生命周期包含加载、连接、初始化、使用和卸载这5个阶段，或者是类加载、使用、卸载这3个阶段。</p>
<p>回到上图，加载、验证、准备、初始化和卸载这5个阶段的<strong>开始顺序</strong>是确定的，如图中箭头所示。之所以强调“开始顺序”，是因为这里的先后顺序仅仅是各阶段开始时间的顺序，而不是进行或完成的顺序，这些阶段<strong>通常是相互交叉地混合式进行的</strong>。比如加载和验证，并不是说非要等到加载完成之后，才开始验证阶段，在加载的阶段中，会穿插各种检验动作，否则对于连格式都不符合的字节流，又怎能正确解析出其中的静态数据结构从而转化为方法区中的数据结构呢？对于解析阶段，<strong>其开始时间则比较特殊</strong>，既可能在加载阶段就开始（对常量池中的符号引用的解析），也可能在初始化阶段之后才开始（支持Java语言的动态绑定）。</p>
<p>下面我们就来看看各个阶段都大致做哪些事情。</p>
<h2 id="一、类加载的过程"><a href="#一、类加载的过程" class="headerlink" title="一、类加载的过程"></a>一、类加载的过程</h2><p>类加载的过程包含<strong>加载</strong>、<strong>连接</strong>和<strong>初始化</strong>三个阶段。</p>
<h3 id="1-1-加载"><a href="#1-1-加载" class="headerlink" title="1.1 加载"></a>1.1 加载</h3><p>加载是类加载过程的第一阶段，此时虚拟机将查找并加载类的二进制数据，具体分为三个步骤：</p>
<ul>
<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在内存中生成一个代表此类的<strong>java.lang.class</strong>对象，作为对方法区中此类的各种数据的访问入口。</li>
</ul>
<p>这三条属于虚拟机规范的内容，只指明了做什么，具体实现交由虚拟机实现自行安排，这就给了虚拟机实现和具体应用足够的灵活度。对于第一条，并未指明定义类的二进制字节流的存储形式（class文件、ZIP包）、来源（本地文件系统、内存或网络）以及获取方式（既可以从已有静态资源读取也可动态生成），因而就有了如下的多样可能性：</p>
<ul>
<li><strong>从ZIP包中读取</strong>，这是后来支持类加载器可从<strong>JAR、EAR、WAR</strong>等格式文件中加载class的基础。</li>
<li><strong>从网络中获取字节流</strong>，我们熟知的Applet是这种场景的典型应用。</li>
<li><strong>程序动态生成字节流</strong>，这种场景应用最多的就是动态代理，通过字节码技术动态生成代理类的二进制字节流。</li>
<li><strong>由除了Java源文件之外的其他文件编译而成</strong>，如JSP文件、Scala源文件等。</li>
</ul>
<p>对于第三条中所说的“内存”，虚拟机规范并没有明确规定是在Java堆还是方法区中，对于我们最为熟悉的<strong>HotSpot</strong>虚拟机，是存放在Java堆的永久代中。实际上永久代是<strong>HotSpot</strong>虚拟机特有的，是它对虚拟机规范中方法区概念的具体实现（<strong>JDK1.7及以下</strong>），对于其他虚拟机（如<strong>IBM J9</strong>）是不存在永久代一说的，关于方法区和永久代的关系超出本博文的谈论范畴了，点到为止。</p>
<p>加载阶段完成后，原本定义类的二进制字节流就按照虚拟机所需的格式存储在方法区中，这里的存储格式依具体的虚拟机实现而定，各有差异，虚拟机规范并未规定此区域的具体数据结构。</p>
<p>关于<strong>加载阶段的注意点</strong>：</p>
<ol>
<li>数组类的加载比较特殊，它本身并不通过类加载器创建，而是由Java虚拟机直接创建，但数组类的元素类型（去掉所有维度后的类型，比如A[][]的元素类型，就是A）是由类加载器加载的。举例，对于类型<code>org.sherlockyb.test.HelloWorld</code>，定义一维数组类<code>HelloWorld[] hws = new HelloWorld[8]</code>，虚拟机会直接创建名为“[Lorg.sherlockyb.test.HelloWorld”的数组类，并对其进行初始化。</li>
</ol>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>上一节中加载阶段的第一步骤——“通过一个类的全限定名来获取定义此类的二进制字节流”，就是类加载器所做的唯一工作，类加载器是Java技术体系中的重要基石，它在类层次划分、OSGi、热部署、代码加密等领域扮演着重要角色，关于它我们暂且不做细致介绍，后面会有单独博文深入探讨之。</p>
<h4 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h4><p>虚拟机规范并未强制规定加载阶段具体什么时候开始，由虚拟机实现自由把握。就我们所熟知的<strong>HotSpot</strong>虚拟机来说，有两种情况：</p>
<ul>
<li><strong>预加载</strong>。虚拟机在启动时会预先加载rt.jar中的class文件，其中包括<strong>java.lang.*、java.util.*、java.io.*</strong>等运行时常用的类。</li>
<li><strong>运行时加载</strong>。当虚拟机在运行过程中需要某个类时，如果该类的class未被加载则加载之。</li>
</ul>
<h3 id="1-2-连接"><a href="#1-2-连接" class="headerlink" title="1.2 连接"></a>1.2 连接</h3><p>连接可细分为三个阶段：验证、准备和解析。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>连接的第一个阶段，确保从class文件中所加载的字节流符合当前虚拟机的要求，且<strong>不会危害虚拟机自身的安全</strong>。该阶段会依次进行如下验证：</p>
<ul>
<li><strong>文件格式验证</strong>：判断当前字节流是否符合<strong>class文件格式</strong>的规范。如是否以class文件的魔数<strong>oxCAFEBABE</strong>开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中常量的类型是否合法等等。校验的目的是保证字节流能正确地解析并存储于方法区内，通过验证后，会在方法区中存储，后面的校验动作都是基于方法区的存储结构进行，不再直接操作字节流。</li>
<li><strong>元数据验证</strong>：语义分析，判断其描述的信息是否符合Java语言的规范要求。如该类除了<strong>java.lang.Object</strong>之外，是否有其他父类；该类的父类是否继承了不允许被继承的final类等</li>
<li><strong>字节码验证</strong>：通过数据流和控制流分析，判断程序语义是否合法、符合逻辑。如保证跳转指令不会跳转到方法体以外的字节码指令上、方法体中的类型转换是有效的等。</li>
<li><strong>符号引用验证</strong>：发生在解析阶段将符号引用转为直接引用的时候，确保解析动作能正确执行。如符号引用中通过字符串描述的全限定名是否能找到对应类。</li>
</ul>
<p>从上面可以看出，验证阶段非常重要，关乎虚拟机的安全，<strong>但它并不是必须的</strong>，它对程序运行期没有影响，如果所引用的类已被反复使用和验证过，那么可以考虑采用<code>-Xverifynone</code>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。通常来讲，应用所加载的class文件都是由我们本地或服务器的JDK编译通过的，我们都确定它是符合虚拟机要求的，对于这类class文件其实并不需要验证，主要是像从网络加载的class字节流或是通过动态字节码技术生成的字节流，出于安全的考虑，是必须要经过严格验证的。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段做的唯一一件事就是为类的静态变量分配内存，并将其初始化为默认值。注意这里的初始化和后面要讲的“初始化阶段”是不同的，容易混淆。<strong>这些内存都在方法区中分配</strong>。几点注意项：</p>
<ul>
<li>对于初始化为默认值这一点，有两个角度的理解：从Java应用层面讲，会为不同的类型设置对应的<strong>零值</strong>，如对于int、long、byte等整数对应就是0，对于float、double等浮点数则是0.0，而对于引用类型则是null，有个零值映射表，具体就不在这一一列举了；从JVM层面，实际上就是分配了一块全0值的内存，只是不同的数据类型对于0值有不同的解释含义，这是Java编译器自动为我们做的。</li>
<li>如果类的静态变量是<strong>final</strong>的，即它的字段属性表中存在<strong>ConstantValue</strong>属性，那么在准备阶段就会被初始化为程序指定的值，比如对于<code>public static final int len = 5</code>，在准备阶段<code>len</code>的值已经被设置为5了。实际上对于final的类变量，在编译时就已经将其结果放入了调用它的类的常量池中，这种类变量的访问并不会触发其所属类的初始化阶段。</li>
</ul>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>该阶段把类在常量池中的符号引用转为直接引用。符号引用就是一组用来描述目标的字面量，说白了就是静态的占位符，与内存布局无关，而直接引用则是运行时的，是指内存中直接指向目标的指针、相对偏移量或间接定位到目标的句柄。解析工作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符这7类符号引用，将其替换为直接引用。</p>
<p>虚拟机规范规定，在执行<strong>anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、multianewarray、new、putfield</strong>和<strong>putstatic</strong>这16个用于操作符号引用的字节码指令之前，必须先对符号引用进行解析。至于具体时间并未要求，交由虚拟机实现自行决定：在类被加载时就对常量池中的符号引用进行解析（静态指令，除invokedynamic之外的），或是等到一个符号引用将要被使用前才去解析（动态指令：invokedynamic，为了支持动态绑定）。</p>
<h3 id="1-3-初始化"><a href="#1-3-初始化" class="headerlink" title="1.3 初始化"></a>1.3 初始化</h3><p>为类的静态变量赋予程序设定的初始值。在Java中对类变量设定初始值有两种方式：声明类变量时指定初始值和静态代码块为静态变量赋值。我们来看下类的初始化步骤：</p>
<ul>
<li>若该类还没有被加载和连接，则先加载并连接该类</li>
<li>若该类的直接父类没有被初始化，则先初始化其父类（接口没有此规则）</li>
<li>若该类有初始化语句（赋值语句和静态代码块），则按照代码中申明的顺序依次执行初始化语句</li>
</ul>
<p>我们可以从字节码层面获知上述初始化步骤的原理，</p>
<blockquote>
<p>编译器在编译Java源文件时，自动收集类中所有类变量的赋值操作和静态语句块中的语句（<strong>按照源码中声明先后顺序</strong>），将其合并产生<strong>&lt;clinit&gt;</strong>方法，即<strong>类构造器</strong>（注意与实例构造器<strong>&lt;init&gt;</strong>相区分）。该方法的执行过程遵循以下规则：</p>
</blockquote>
<ul>
<li>虚拟机保证在子类的<strong>&lt;clinit&gt;</strong>方法执行之前，会先执行父类的<strong>&lt;clinit&gt;</strong>方法（<strong>若父类是接口，则忽略不执行</strong>），依次递归。</li>
<li><strong>&lt;clinit&gt;</strong>方法并不是必须的。若一个类或接口中既没有类变量的赋值操作也没有静态语句块（<strong>接口没有此项</strong>），编译器可以不为它生成<strong>&lt;clinit&gt;</strong>方法。</li>
<li>虚拟机会保证<strong>&lt;clinit&gt;</strong>方法在多线程环境中被正确地加锁、同步，确保同一时刻只会有一个线程去执行该方法。这也是单例模式其中一种实现方式（定义静态实例）的依据。</li>
</ul>
<h4 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a>初始化时机</h4><p>虚拟机规范严格规定，当发生对一个类的<strong>主动引用</strong>时，会立即触发类的初始化阶段。<strong>主动引用</strong>有且仅有以下5种情况：</p>
<ul>
<li>遇到<strong>new</strong>、<strong>getstatic</strong>、<strong>putstatic</strong>或<strong>invokestatic</strong>这4条字节码时，如果类没有被初始化，则先触发其初始化。从Java代码层面来讲，就是使用<strong>new</strong>关键字实例化对象、读取或设置类的静态字段（<strong>final</strong>修饰的常量字段除外）、调用静态方法的时候。</li>
<li>使用<strong>java.lang.reflect</strong>包的方法对类进行反射调用时，如Class.forName(…)。</li>
<li>当初始化一个类时，若其父类还未初始化，则先触发其父类的初始化（接口无此规则）。</li>
<li>当虚拟机启动时，用户需指定一个主类（包含main方法），虚拟机会先初始化该类。</li>
<li>对于<strong>REF_getStatic、REF_putStatic、REF_invokeStatic</strong>方法句柄（使用JDK1.7的动态特性），若其对应的类还未初始化，则先触发其初始化。</li>
</ul>
<p>除此之外，其他所有引用类的方式都属于<strong>被动引用</strong>，不会触发初始化。</p>
<h2 id="二、类的使用"><a href="#二、类的使用" class="headerlink" title="二、类的使用"></a>二、类的使用</h2><p>包括主动引用和被动引用，前者在上节已有说明，我们来列举几个被动引用的实例：</p>
<ul>
<li>通过子类调用父类的静态字段，不会触发子类初始化。</li>
<li>通过数组定义来引用类，不会触发该类的初始化。例如<code>A[] arr = new A[8]</code> ，并不会触发A的初始化。</li>
<li>在类A中调用B的常量字段，不会触发B的初始化。因为此常量字段在编译阶段会通过常量传播优化而存入调用类A的常量池中，本质上并没有直接引用到定义类B。且编译成class之后，A和B就不存在任何联系了。</li>
</ul>
<h2 id="三、类的卸载"><a href="#三、类的卸载" class="headerlink" title="三、类的卸载"></a>三、类的卸载</h2><p>当一个类被判定为无用类时，才可以被卸载。条件苛刻，需要同时满足如下条件：</p>
<ul>
<li>类的所有实例都已被回收。</li>
<li>加载该类的ClassLoader已被回收。</li>
<li>该类对应的<strong>java.lang.Class</strong>对象没有在任何地方被引用。</li>
</ul>
<p>对于满足上述3个条件的无用类，虚拟机可以对其回收，但并不是必然的，是否回收可通过<code>-Xnoclassgc</code>参数控制。<strong>注意</strong>：在大量使用反射、动态代理等字节码框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代（特指HotSpot虚拟机）不会溢出。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于算是“走马观花”般地把Java类的生命周期过了一遍，相信当再提起类的生命周期时，大家脑海里就会立马浮现出类生命周期的大纲，都有哪些阶段，每个阶段都大致做些什么事情，都有些什么注意点，这样，本博文的目的就达到了！掌握了全局之后，接下来就是细节的探讨，比如像验证阶段中的字节码验证，实际是非常复杂的，虚拟机专门为此做了诸多优化；再比如解析阶段，7类符号引用各自不同的解析细节又是什么，等等之类。之后，笔者将会单独另起博文，针对类加载器、解析阶段等进行详细分析，敬请期待。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类的生命周期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个Long类型真的不能直接用>或<比较么？其实可以]]></title>
      <url>http://www.yangbing.club/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/</url>
      <content type="html"><![CDATA[<p>　　当我在Google输入“Long类型的比较”时，会出现多如牛毛的与这个问题相关的博文，并且这些博文对此问题的看法如出一辙，都“不约而同”地持有如下观点：</p>
<blockquote>
<p>对于Long类型的数据，它是一个对象，所以对象不可以直接通过“&gt;”，“==”，“&lt;”的比较。若要比较是否相等，可以用Long对象的<strong>equals</strong>方法；若要进行“&gt;”，“&lt;”的比较，需通过Long对象的<strong>longValue</strong>方法。</p>
</blockquote>
<p>那么问题来了，这个观点真的全对吗？或者准确地说，后半段关于“&gt;”，“&lt;”的说法真的对吗？起初我也差点信了，按理说Java中并没有像C++中的操作符重载之类的东东，对象直接拿来用“&gt;”或“&lt;”比较确实很少这么干的，而且有童鞋可能会说，既然大家都这么说，当然是对的无疑咯。那么今天笔者想告诉你的是，<strong>它是错的</strong>！<strong>Long类型可以直接用“&gt;”和“&lt;”比较，并且其他包装类型也同理</strong>。不信？先别急着反驳，且听笔者娓娓道来。</p>
<a id="more"></a>
<h1 id="问题起源"><a href="#问题起源" class="headerlink" title="问题起源"></a>问题起源</h1><p>　　关于Long类型的大小比较这个问题，其实是源于我的上一篇博文<a href="http://www.yangbing.club/2017/12/30/talk-about-ali-and-google-s-java-developing-guideline/">谈谈ali与Google的Java开发规范</a>，在其中关于“<strong>相同类型的包装类对象之间值的比较</strong>”这一规范，我补充了如下一点：<br>　　<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image1.png" alt="1"></p>
<p>　　然后oschina上的一个热心网友关于此提出了一个很好的问题：<br>　　<br><img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image2.png" alt="1"></p>
<p>　　即有没有可能比较的是内存地址并且刚好其大小满足上述条件？想想也不无道理，毕竟对于Java中的对象引用a、b、c的值实际就是对象在堆中的地址。关于这个问题，其实我最初也质疑过，为此我编写了多种类似上面的testCase，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</div><div class="line">Long b = <span class="keyword">new</span> Long(<span class="number">2000L</span>);</div><div class="line">Long c = <span class="keyword">new</span> Long(<span class="number">222L</span>);</div><div class="line">Assert.isTrue(a&lt;b &amp;&amp; a&gt;c);	<span class="comment">//断言成功</span></div></pre></td></tr></table></figure>
<p>　　最终的结论跟预期一致的：两者的比较结果跟Long对象中的数值大小的比较结果是一致的，至少从目前所尝试过的所有testCase来看是这样的。</p>
<h1 id="从现象到本质"><a href="#从现象到本质" class="headerlink" title="从现象到本质"></a>从现象到本质</h1><p>　　但是，光靠那几个有限的单元测试，貌似并不具有较强的说服力，心中难免总有疑惑：会不会有特殊的case没覆盖到？会不会还是地址比较的巧合？怎么才能有效地验证我的结论呢？</p>
<p>　　于是我开始琢磨：毕竟对于<code>new Long()</code>这种操作，是在堆中动态分配内存的，我们不太好控制a、b等的地址大小，那又该怎么验证上述的比较不是地址比较的结果呢？除了地址之外，还有别的我们能控制的吗？有的，那就是对象中的内容！我们可以在不改变对象引用值的情况下，改变对象的内容，然后看其比较结果是否发生变化，这对于我们来说轻而易举。有时候换个角度思考问题，就能有新的收获！</p>
<h2 id="一、debug验证"><a href="#一、debug验证" class="headerlink" title="一、debug验证"></a>一、debug验证</h2><p>　　那么接下来，我们就可以用反证法来证明上述问题，还是以本文开头的testCase为例：假设上述testCase中比较的是地址值，只要我们不对a、b进行赋值操作，即不改变它们的地址值，其比较结果就应该也是始终不变，此时我们仅修改对象中的数值，这里对应Long对象中的value字段，使数值的大小比较与当前Long对象的比较结果相反，如果此时Long对象的比较结果也跟着变为相反，也就推翻了地址比较这一假设，否则就是地址比较，证毕。</p>
<p>　　接下来以实例来演示我们的推断过程。首先上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> sherlockyb</div><div class="line"> * @2018年1月14日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">longCompare</span><span class="params">()</span> </span>&#123;</div><div class="line">    Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</div><div class="line">    Long b = <span class="keyword">new</span> Long(<span class="number">222L</span>);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> flagBeforeAlter = a &gt; b;</div><div class="line">    <span class="keyword">boolean</span> flagAfterAlter = a &gt; b; <span class="comment">// 断点1</span></div><div class="line"></div><div class="line">    System.out.println(<span class="string">"flagBeforeAlter: "</span> + flagBeforeAlter</div><div class="line">        + <span class="string">", flagAfterAlter: "</span> + flagAfterAlter); <span class="comment">// 断点2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　我们以debug模式运行上述testCase，首先运行到断点1处，此处可观察到<code>flagBeforeAlter</code>的当前值为<strong>true</strong>：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image3.png" alt="1"></p>
<p>　　此时我们通过<code>Change Value</code>修改a中的value值为100L，如图：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image4.png" alt="1"></p>
<p>　　然后F8到断点2，观察此时<code>flagAfterAlter</code>的值为<strong>false</strong>：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image5.png" alt="1"></p>
<p>　　最后的输出结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flagBeforeAlter: <span class="keyword">true</span>, flagAfterAlter: <span class="keyword">false</span></div></pre></td></tr></table></figure></p>
<p>　　由此说明，两个Long对象直接用“&gt;”或“&lt;”比较时，是数值比较而非地址比较。</p>
<p>　　好了，上面的debug测试已经能解释我们的困惑，但是笔者认为这还不够！仅仅停留在表面不是我们程序猿的作风，我们要从本质——源码出发。原理是什么？为什么最终比较的是数值而不是引用？难道这也发生了自动拆箱吗？（跟我们以前所认知的自动拆箱有出入哦）</p>
<h2 id="二、回归本质——字节码"><a href="#二、回归本质——字节码" class="headerlink" title="二、回归本质——字节码"></a>二、回归本质——字节码</h2><p>　　真理来自源码。我们通过<code>javap -c</code>来看下刚才那个JdkTest类，反编译字节码是啥：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">// Compiled from "JdkTest.java"</div><div class="line">public class org.sherlockyb.blogdemos.jdk.JdkTest &#123;</div><div class="line">  public org.sherlockyb.blogdemos.jdk.JdkTest();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: invokespecial #8                  // Method java/lang/Object."&lt;init&gt;":()V</div><div class="line">       4: return        </div><div class="line"></div><div class="line">  public void longCompare();</div><div class="line">    Code:</div><div class="line">       0: new           #17                 // class java/lang/Long</div><div class="line">       3: dup           </div><div class="line">       4: ldc2_w        #19                 // long 1000l</div><div class="line">       7: invokespecial #21                 // Method java/lang/Long."&lt;init&gt;":(J)V</div><div class="line">      10: astore_1      </div><div class="line">      11: new           #17                 // class java/lang/Long</div><div class="line">      14: dup           </div><div class="line">      15: ldc2_w        #24                 // long 222l</div><div class="line">      18: invokespecial #21                 // Method java/lang/Long."&lt;init&gt;":(J)V</div><div class="line">      21: astore_2      </div><div class="line">      22: aload_1       </div><div class="line">      23: invokevirtual #26                 // Method java/lang/Long.longValue:()J</div><div class="line">      26: aload_2       </div><div class="line">      27: invokevirtual #26                 // Method java/lang/Long.longValue:()J</div><div class="line">      30: lcmp          </div><div class="line">      31: ifle          38</div><div class="line">      34: iconst_1      </div><div class="line">      35: goto          39</div><div class="line">      38: iconst_0      </div><div class="line">      39: istore_3      </div><div class="line">      40: aload_1       </div><div class="line">      41: invokevirtual #26                 // Method java/lang/Long.longValue:()J</div><div class="line">      44: aload_2       </div><div class="line">      45: invokevirtual #26                 // Method java/lang/Long.longValue:()J</div><div class="line">      48: lcmp          </div><div class="line">      49: ifle          56</div><div class="line">      52: iconst_1      </div><div class="line">      53: goto          57</div><div class="line">      56: iconst_0      </div><div class="line">      57: istore        4</div><div class="line">      59: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">      62: new           #36                 // class java/lang/StringBuilder</div><div class="line">      65: dup           </div><div class="line">      66: ldc           #38                 // String flagBeforeAlter: </div><div class="line">      68: invokespecial #40                 // Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</div><div class="line">      71: iload_3       </div><div class="line">      72: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;</div><div class="line">      75: ldc           #47                 // String , flagAfterAlter: </div><div class="line">      77: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      80: iload         4</div><div class="line">      82: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;</div><div class="line">      85: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      88: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class="line">      91: return        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　第59行（这里的“行”是一种形象的描述，实指当前字节码相对于方法体开始位置的偏移量）是我们打印结果的地方：<code>System.out.println(...)</code><br>　　从字节码可以清晰地看到第<strong>23</strong>、<strong>27</strong>行以及第<strong>41</strong>、<strong>45</strong>行，invokevirtual，显式调用了<code>java/lang/Long.longValue:()</code>方法，<strong>确实自动拆箱</strong>了。也就是说对于基本包装类型，除了我们之前所认知的自动装箱和拆箱场景（关于自动装箱和拆箱，大家可以参考这篇博文——<a href="https://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/" target="_blank" rel="external">Java中的自动装箱与拆箱</a>，写的不错，这里我就不做过多叙述了）外，<strong>对于两个包装类型的&gt;和&lt;的操作，也会自动拆箱</strong>。无需任何testCase来佐证，结论一目了然。</p>
<p>　　除了Long类型，感兴趣的童鞋还可以找Integer、Byte、Short等来验证下，结果是一样的，这里我就不做过多叙述了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　古人说得好——<strong>尽信书，则不如无书</strong>。可能，大多数的我们在面对这个问题时，都会下意识地去Google一把，然后多家博客对比查阅，最后发现几乎所有的博文都是一致的观点：Long对象不可直接用”&gt;”或”&lt;”比较，需要调用<code>Long.longValue()</code>来比较。于是毫无疑问地就信了。当再次遇到这个问题时，就会“很自信”地告诉别人，要用<code>Long.longValue()</code>比较。而实际呢，却不知道自己已经陷入误区！</p>
<p>　　虽然今天谈论的只是Long对象的”&gt;”或”&lt;”用法问题，看起来好像是个“小问题”，最坏情况下，如果不确定是否可以直接比较，大不了直接用Long.longValue来比较，并不会阻碍你编码。但是，笔者想说但是，作为一个程序猿，<strong>打破砂锅问到底的精神是不可少的，我们应该拒绝黑盒，追求细节</strong>，这样才可能更好地成长，在代码的世界里游刃有余。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK源码 </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈谈ali与Google的Java开发规范]]></title>
      <url>http://www.yangbing.club/2017/12/30/talk-about-ali-and-google-s-java-developing-guideline/</url>
      <content type="html"><![CDATA[<p>　　无规矩不成方圆，编码规范就如同协议，有了Http、TCP等各种协议，计算机之间才能有效地通信，同样的，有了一致的编码规范，程序员之间才能有效地合作。道理大家都懂，可现实中的我们，经常一边吐槽别人的代码，一边写着被吐槽的代码，究其根本，就是缺乏遵从编码规范的意识！多年前，Google发布<code>Google Java Style</code>来定义Java编码时应遵循的规范；今年年初阿里则发布<code>阿里巴巴Java 开发手册</code>，并随后迭代了多个版本，直至9月份又发布了pdf终极版。这两大互联网巨头的初衷，都是希望能够统一标准，使业界编码达到一致性，提升沟通和研发效率，这对于我们码农无疑是很赞的一笔福利呀。笔者将两份规范都通读了一遍，其中列举的不少细则跟平时的编码习惯基本是符合的，不过还是有不少新奇的收获，忍不住记录在此，供日后念念不忘~</p>
<a id="more"></a>
<h1 id="Java开发规范总览"><a href="#Java开发规范总览" class="headerlink" title="Java开发规范总览"></a>Java开发规范总览</h1><h2 id="一、Google-Java-Style"><a href="#一、Google-Java-Style" class="headerlink" title="一、Google Java Style"></a>一、Google Java Style</h2><p>　　Google的java开发规范主要分为6大部分：源文件基本规范、源文件结构、代码格式、命名、编程实践和Javadoc，各部分概要如下：</p>
<blockquote>
<p>1、源文件基本规范（source file basics）：文件名、文件编码、特殊字符的规范要求<br>2、源文件结构（source file structure）：版权许可信息、package、import、类申明的规约<br>3、代码格式（formatting）：大括号、缩进、换行、列长限制、空格、括号、枚举、数组、switch语句、注4、解、注释、和修饰符等格式要求<br>5、命名（Naming）：标识符、包名、类名、方法名、常量名、非常量成员名、参数名、局部变量的命名规范<br>6、编程实践（Programming Practices）：@override、异常捕获、静态成员、Finalizers等用法规约</p>
</blockquote>
<h2 id="二、阿里巴巴Java开发手册"><a href="#二、阿里巴巴Java开发手册" class="headerlink" title="二、阿里巴巴Java开发手册"></a>二、阿里巴巴Java开发手册</h2><p>　　阿里的Java开发手册相对于前者更上一层楼，它除了基本的编程风格的规约外，还给出了日志、单元测试、安全、MySQL、工程结构等代码之外的规约，据说是阿里近万名开发同学集体智慧的结晶，相当了得，还是挺值得借鉴一下的。各部分概要如下：</p>
<blockquote>
<p>1、编程规约：命名风格、常量、代码格式、OOP、集合处理、并发、控制语句、注释等<br>2、异常日志：异常处理、日志的命名、保留时间、输出级别、记录信息等<br>3、单元测试：AIR原则（Automatic,Independent,Repeatable）、单侧的代码目录、目标，单侧的写法，即BCDE原则（Border,Correct,Design,Error）<br>4、安全规约：权限校验、数据脱敏、参数有效校验、CSRF安全过滤、防重放限制、风控策略等<br>5、MySQL数据库：建表、索引、SQL语句、ORM映射等<br>6、工程结构：应用分层、二方库依赖（坐标命名、接口约定、pom配置）、服务器端各项配置（TCP超时、句柄数、JVM参数等）</p>
</blockquote>
<h1 id="熟知的规范"><a href="#熟知的规范" class="headerlink" title="熟知的规范"></a>熟知的规范</h1><p>　　对于大家已经烂熟于心并已习惯遵守的一些编码规范，比如类名、常量的命名、数组的定义、Long类型的字面等，就不在此一一列出了，只想就一些平时编码中较容易个性化，并可能会存在争议的规范进行一番探讨。为了便于说明，用<strong>G</strong>表示规范出自于<code>Google Java Style</code>，<strong>A</strong>表示规范出自于<code>阿里巴巴Java开发手册</code>。</p>
<blockquote>
<p>[A]IDE的<code>text file encoding</code>设置为UTF-8；IDE中文件的换行符使用Unix格式，不要使用Windows格式([G]文件编码：UTF-8)</p>
</blockquote>
<p>　　看似简单的一个编码约定，在实际开发过程中却经常出现不一致，由于我们是中文操作系统，系统编码是GBK。当两个协作的开发人员IDE，一个采用系统默认编码，一个设置为UTF-8，那么二人看对方写的中文注释就各自都是乱码了，很尴尬。对于“换行符使用Unix格式”，这个在编写shell和hive脚本时踩过好几次坑，而且错误提示很隐晦，一时半会还真察觉不出来，只能说这个规范请务必遵守！</p>
<blockquote>
<p>[A]代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p>
</blockquote>
<p>　　大多数程序员还是都会遵从英文的命名方式，但在实际工作中还真有遇到过拼音与英文混用的命名，比如创建报文的函数命名为<code>createBaowen</code>，看起来怪怪的，有点不伦不类。</p>
<blockquote>
<p>[A]抽象类命名使用Abstract或Base开头；异常类使用Exception结尾；测试类以它要测试的类的名称开始，以Test结尾</p>
</blockquote>
<p>　　以spring源码为例，其抽象类都是以Abstract开头，异常类以Exception结尾，测试类则是以Tests结尾。</p>
<blockquote>
<p>[A]POJO类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。</p>
</blockquote>
<p>　　这个问题一说大家都知道，但实际却是很容易被忽视！因为Boolean通常表达“是”或“否”的意思，可能一遇到布尔变量，大家会习惯性地将它与is关联起来，“很自然”地就会以is开头定义变量。但笔者想说的是，这其实反应了至少两个问题：1、对<a href="http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/" target="_blank" rel="external">JavaBean属性命名规范</a>不熟；2、对框架解析POJO的原理不熟，如RPC反向解析、spring MVC参数绑定、MyBatis处理映射等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isActive;</div><div class="line"><span class="comment">//lombok、Eclipse生成getter、setter的结果如下，框架会误把变量解析成active</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> isActive;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActive</span><span class="params">(<span class="keyword">boolean</span> isActive)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.isActive = isActive;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　在搞清这两个问题前，还是建议老老实实按规范来吧。</p>
<blockquote>
<p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<strong>单数</strong>形式，类名若有复数含义，则可使用复数形式。</p>
</blockquote>
<p>　　实际工作中看到过包名包含下划线的，如<code>org.sherlockyb.user_manage.dao</code>，还是有必要统一一下。</p>
<blockquote>
<p>[A]不允许任何魔法值（即未经定义的常量）直接出现在代码中。<br><strong>反例</strong>：String key = “Id#taobao_” + tradeId;<br>​           cache.put(key, value);</p>
</blockquote>
<p>　　避免硬编码问题是每个程序员都应该具备的基本素养，硬编码所带来的可读性差、维护困难等问题，众所周知。</p>
<blockquote>
<p>[A,G]采用空格缩进，禁止使用tab字符。</p>
</blockquote>
<p>　　这是Google和ali一致的规约，只不过前者是一个tab对应2个空格，后者则是4个空格。之所以不提倡tab键，是因为不同的IDE对tab键的“翻译”默认有所差异，容易因不同程序员的个性化而导致同一份代码的格式混乱。</p>
<blockquote>
<p>[A,G]单行字符数限制不超过120/100个字符，超出需要换行，换行时遵循如下规则：<br>1）[A,G]第二行相对于第一行缩进4个空格，从第三行开始，不再继续缩进。<br>2）[A]运算符或方法调用的点符号与下文一起换行([G]若是<strong>非赋值运算符</strong>，则在该符号前断开；若是<strong>赋值运算符</strong>或<code>foreach</code>中的分号，则在该符号后断开)。<br>4）[A]方法调用时，多个参数，需要换行时，在逗号后进行([G]逗号与前面的内容留在同一行)。<br>5）在括号前不要换行。</p>
</blockquote>
<p>　　对于单行字符限制，阿里的是120，Google的是100。个人觉得120略长，特别是当用笔记本码代码时，对于超限的代码行，经常要用横向滚动条，不太友好，个人推荐100的限制。</p>
<blockquote>
<p>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>
</blockquote>
<p>　　在变量较多时，这种对齐是一种累赘。虽说有IDE的自动格式化功能，但多人协作时，难保各自的格式化没有差异，会因格式变化而造成不必要的代码行改动，无疑会给你的代码合并徒增困扰。</p>
<blockquote>
<p>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</p>
</blockquote>
<p>　　代码分块就如同文章分段，整洁的代码具有更强的自解释性。</p>
<blockquote>
<p>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。作为提供方，接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么；作为调用方，有义务去考证过时方法的新实现是什么。</p>
</blockquote>
<p>　　接口契约，是使用方和调用方良好协作的有效保障，请务必遵守。</p>
<blockquote>
<p>所有的相同类型的包装类对象之间<strong>值的比较</strong>，全部用equals方法比较。<br>说明：对于<code>Integer var = ?</code>在<strong>-128至127</strong>范围内的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是个大坑，推荐使用equals方法进行判断。</p>
</blockquote>
<p>　　这里补充几点，除了Integer，其他包装类型如Long、Byte等都有各自的cache。这里只提到了等值比较，对于&gt;,&lt;等非等值比较，没必要手动拆箱去比较，包装类型之间直接可以比较大小，亲测有效。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</div><div class="line">Long b = <span class="keyword">new</span> Long(<span class="number">222L</span>);</div><div class="line">Long c = <span class="keyword">new</span> Long(<span class="number">2000L</span>);</div><div class="line">Assert.isTrue(a &gt; b &amp;&amp; a &lt; c);  <span class="comment">//断言成功</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>[A]关于基本数据类型与包装数据类型的使用标准如下：<br>1）所有的POJO类属性必须使用包装数据类型。<br>2）RPC方法的返回值和参数必须使用包装数据类型。<br>3）所有的局部变量使用基本数据类型。<br>说明：POJO类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE问题，或者入口检查，都<strong>由使用者来保证</strong>。</p>
</blockquote>
<p>　　基本类型作为入参和返回值有多种弊病，如不情愿的默认值，NPE风险等，除了局部变量，其他慎用。</p>
<blockquote>
<p>序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列化失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。</p>
</blockquote>
<p>　　serialVersionUID是Java为每个序列化类产生的版本标识：版本相同，相互之间则可序列化和反序列化；版本不同，反序列化时会抛出InvalidClassException。因不同的jdk编译很可能会生成不同的serialVersionUID默认值，通常需要显式指定，如1L。</p>
<blockquote>
<p>[A]final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字：<br>1）不允许被继承的类，如：String类。<br>2）不允许修改引用的域对象，如：POJO类的域变量。<br>3）不允许被重写的方法，如：POJO类的setter方法。<br>4）不允许运行过程中重新赋值的局部变量，如传递给匿名内部类的局部变量。</p>
</blockquote>
<p>　　final关键字有诸多好处，比如JVM和Java应用都会缓存final变量，以提高性能；final变量可在多线程环境下放心共享，无需额外的同步开销；JVM会对final修饰的方法、变量及类进行优化等，详情可见<a href="http://www.importnew.com/7553.html" target="_blank" rel="external">深入理解Java中的final关键字</a>。</p>
<blockquote>
<p>慎用Object的clone方法来拷贝对象。<br>说明：对象的clone方法默认是浅拷贝，特别是引用类型成员。若想实现深拷贝，需要重写clone方法实现属性对象的拷贝。</p>
</blockquote>
<p>　　Java中的赋值操作都是值传递，比如我们常用来“复制”DTO的工具，无论是spring的BeanUtils.copyProperties，还是Apache commons的BeanUtils.cloneBean，实际上也只是两个DTO之间成员的引用复制，成员指向的对象还是同一个，用到此类工具的时候要有这个意识，不然容易踩坑。</p>
<blockquote>
<p>[A]类成员与方法访问控制从严：<br>1）如果不允许外部直接通过new来创建对象，那么构造方法必须是private。<br>2）工具类不允许有public或default构造方法。<br>3）类非static成员变量并且与子类共享，必须是protected。<br>4）类非static成员变量并且仅在本类使用，必须是private。<br>5）类static成员变量如果仅在本类使用，必须是private。<br>6）若是static成员变量，必须考虑是否为final。<br>7）类成员方法只供类内部调用，必须是private。<br>8）类成员方法只对继承类公开，那么限制为protected。<br><strong>说明</strong>：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p>
</blockquote>
<p>　　<strong>最小权限原则</strong>（Principal of least privilege，POLP）是每个程序员应遵守的，可有效避免数据以及功能受到错误或恶意行为的破坏。</p>
<blockquote>
<p>[A]ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常。</p>
</blockquote>
<p>　　这里补充一点，<strong>SubList并未实现Serializable接口</strong>，若RPC接口的List类型参数接受了SubList类型的实参，则在RPC调用时会报出序列化异常。比如我们常用的guava中的Lists.partition，切分后的子list实际都是SubList类型，在传给RPC接口之前，需要用<strong>new ArrayList()</strong>包一层，否则会报序列化异常。</p>
<blockquote>
<p>[A]在subList场景中，<strong>高度注意</strong>对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生ConcurrentModificationException异常。</p>
</blockquote>
<p>　　这个还是得从源码的角度来解释。SubList在构造时实际是直接持有了原list的引用，其add、remove等操作实际都是对原list的操作，我们不妨以add为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">  rangeCheckForAdd(index);</div><div class="line">  checkForComodification();        <span class="comment">// 检查this.modCount与原list的modCount是否一致</span></div><div class="line">  l.add(index+offset, element);    <span class="comment">// 原list新增了一个元素</span></div><div class="line">  <span class="keyword">this</span>.modCount = l.modCount;      <span class="comment">// 将原list更新后的modCount同步到this.modCount</span></div><div class="line">  size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　可以看出，SubList生成之后，通过SubList进行add、remove等操作时，modCount会同步更新，所以没问题；而如果此后还对原list进行add、remove等操作，SubList是感知不到modCount的变化的，会造成modCount不一致，从而报出ConcurrentModificationException异常。故通常来讲，<strong>从原list取了SubList之后，是不建议再对原list做结构上的修改的</strong>。</p>
<blockquote>
<p>[A]使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。</p>
</blockquote>
<p>　　类似的，guava的Maps.toMap方法，返回的是一个<code>ImmutableMap</code>，是不可变的，不能对其调用add、remove等操作，使用时应该有这个意识！</p>
<blockquote>
<p>在JDK7版本及版本以上，Comparator必须满足：1）x,y比较结果和y,x比较结果相反；2）x&gt;y,y&gt;z,则x&gt;z；3）x=y,则x,z比较结果和y,z比较结果相同。不然Arrays.sort，Collections.sort会报IllegalArgumentException异常。</p>
</blockquote>
<p>　　JDK从1.6升到1.7之后，默认排序算法由<a href="http://blog.csdn.net/ghsau/article/details/42060651" target="_blank" rel="external">MergeSort</a>变为<a href="http://www.voidcn.com/article/p-awvclgax-qb.html" target="_blank" rel="external">TimSort</a>，对于任意两个比较元素x、y，其Comparator结果一定要是确定的，特别是对于x=y的情况，确定返回0，否则可能出现<code>Comparison method violates its general contract!</code>错误。</p>
<blockquote>
<p>[A]线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br><strong>说明</strong>：Executors返回的线程池对象的弊端如下：<br>1）<strong>FixedThreadPool</strong>和<strong>SingleThreadPool</strong>：允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。<br>2）<strong>CachedThreadPool</strong>和<strong>ScheduledThreadLocal</strong>：允许的创建线程数为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p>
</blockquote>
<p>　　现在一般很少会用Executors去创建线程池了，通常会使用spring的<code>ThreadPoolExecutorFactoryBean</code>或者guava的<code>MoreExecutors.listeningDecorator</code>对前者包装一下，对于像线程数、队列大小等都是通过配置来设定。</p>
<blockquote>
<p>[A]高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>
</blockquote>
<p>　　一句话概括就是，能不锁就不锁，即便锁，也尽量使锁的粒度最小化。</p>
<blockquote>
<p>[A]表达异常分支时，少用if-else方式，可使用卫语句代替。对于<code>if()...else if()...else...</code>方式，请勿超过3层。对于超过的，可使用卫语句、策略模式、状态模式等来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(condition) &#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 接着写else的业务逻辑代码;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>　　冗长的if-else可读性差，维护困难，推荐使用卫语句，逻辑清晰明了。</p>
<blockquote>
<p>[A]代码修改的同时，注释也做同步修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p>
</blockquote>
<p>　　这个在实际工程代码中还真看到过不少，代码与注释牛头不对马嘴，尽量别留坑给后来者，应该算在程序猿的基本素养之内吧。</p>
<blockquote>
<p>谨慎注释掉代码。在上方详细说明，而不是简单的注释掉。如果无用，则删除。<br><strong>说明</strong>：代码被注释掉有两种可能：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p>
</blockquote>
<p>　　这个就更无力吐槽了，比上一条更常见，so，这条规范强烈推荐！</p>
<blockquote>
<p>1）对于注释的要求：第一、能准确反映设计思想和代码逻辑；第二、能描述业务含义，使别人能迅速了解到代码背后的信息；第三、好的命名、代码结构是自解释性的，注释力求精简准确、表达到位。避免过多过滥的注释。<br>2）finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。若是JDK7及以上，可使用<code>try-with-resources</code>。不能再finally块中使用return，finally块中的return返回后方法结束执行，不会再执行try块中的return语句。<br>3）防止NPE，是程序员的基本素养，注意NPE产生的场景：<br>　　1.返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE<br>　　2.数据库的查询结果可能为null。<br>　　3.远程调用返回对象时，一律要求进行空指针判断，防止NPE。<br>　　4.对于Session中获取的数据，建议NPE检查，避免空指针。<br>　　5.级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。<strong>正例</strong>：使用JDK8的Optional类来防止NPE问题。<br>4）在代码中使用“抛异常”还是“返回错误码”，对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑<strong>使用Result</strong>方式，封装isSuccess()方法、“错误码”、“错误简短信息”。<br>5）避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。</p>
</blockquote>
<p>　　以上几条，皆是毫无争议的基本规范，且行且遵守。</p>
<blockquote>
<p>1）日志文件推荐至少保存15天，因为有些异常具备以“周”为频次发生的特点。<br>2）对trace/debug/info级别的日志输出，必须使用条件输出形式或者使用占位符的方式。以避免不必要的字符串拼接，浪费系统资源。<br>3）避免重复打印日志，浪费磁盘空间，对于特定包的日志，务必设置<code>additivity=false</code>。<br>4）异常信息应该包括两类信息：<strong>案发现场信息</strong>和<strong>异常堆栈信息</strong>。如果不处理，则通过关键字throws往上抛。</p>
</blockquote>
<p>　　关于日志的几条不错的规范。日志作为服务器行为的日常轨迹，对于统计分析、故障排错意义巨大，要慎重对待才是。</p>
<blockquote>
<p>1）好的单元测试必须遵守AIR原则。<br>　　A：Automatic（自动化）。全自动执行，非交互式的。使用assert验证，而非System.out。<br>　　I：Independent（独立性）。单侧用例之间不能产生依赖，互相独立。<br>　　R：Repeatable（可重复）。可重复执行，不能受到外界环境的影响。对于外部依赖，通过spring等DI框架注入一个本地（内存）实现或者Mock实现。<br>2）单元测试的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%。<br>3）编写单元测试代码遵守BCDE原则：<br>　　B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。<br>　　C：Correct，正确的输入，并得到预期的结果。<br>　　D：Design，与设计文档相结合，来编写单元测试。<br>　　E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期结果。</p>
</blockquote>
<p>　　关于单元测试的几条不错的规范。单元测试是代码质量的有效保障！太多的想当然、自以为是，往往会跳过单测，最终自食其果。曾经的笔者也犯过类似毛病，还好及时纠正。</p>
<h1 id="新奇的收获"><a href="#新奇的收获" class="headerlink" title="新奇的收获"></a>新奇的收获</h1><p>　　这里将列出一些笔者觉得有新收获的规范，有的是平时编码过程中没有严格遵守的，比如switch中default偶尔加偶尔不加；有的则是目前还不太清楚的规范。</p>
<blockquote>
<p>[A]杜绝完全不规范的缩写，避免望文不知义。<br><strong>反例</strong>：AbstractClass的“缩写”命名成AbsClass；condition的“缩写”命名成condi，此类随意缩写严重降低了代码的可阅读性。</p>
</blockquote>
<p>　　说来惭愧，这类不规范的缩写，笔者之前还真干过几次。有时候是觉着变量太长，导致明明逻辑很简单的一条语句，就超过了列限制，于是乎主观地缩写命名，如mergedRegionReportDtos缩写为mRegReportDtos，accountIdToHourReportDtos缩写为accountIdToHrDtos，相当混乱有木有！所以，如果对英文单词的缩写拿不定的话，还是直接用原单词吧，长点就长点，可读性很重要。</p>
<blockquote>
<p>[A]如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式，有利于阅读者快速理解架构设计理念。类示例：<strong>OrderFactory</strong>、<strong>LoginProxy</strong>、<strong>ResourceObserver</strong>。</p>
</blockquote>
<p>　　没啥好说的，同样是为了提升代码的自解释性。spring源码中随处可见这样的命名风格：<code>AbstractAutowireCapableBeanFactory</code>、<code>Cglib2AopProxy</code>、<code>BeanDefinitionParserDelegate</code>等</p>
<blockquote>
<p>[A]接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法有关，并且是整个应用的基础常量。<br><strong>正例</strong>：接口方法签名：void f();<br>​           接口基础常量表示：String COMPANY = “alibaba”;<br><strong>反例</strong>：接口方法定义：public abstract void f();<br><strong>说明</strong>：JDK8中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。</p>
</blockquote>
<p>　　目前所见过的组内代码，有太多的接口中方法都是加了public，也许是后来的编码者看到前任留下的已有方法都加了，为了保持一致，于是乎也加了public。说到底还是最初的良好规范没有形成，导致给后来者以错误的指引！简单才是美，把public 去掉吧。</p>
<blockquote>
<p>[A]接口的命名规则：如果是形容能力的接口名称，取对应的形容词做接口名（通常是-able的形式）<br><strong>正例</strong>：AbstractTranslator实现Translatable</p>
</blockquote>
<p>　　Log4j中的AppenderAttachable，JDK中的AutoCloseable，Appendable等。</p>
<blockquote>
<p>[A]各层命名规约：<br>A)Service/DAO层方法命名前缀规约<br>​     1）获取对象时，单个用get/多个用list；2）获取统计值用count<br>​     3）插入用save/insert；4）删除用remove/delete；5）修改用update</p>
</blockquote>
<p>　　关于资源的CRUD，这块的方法命名相当乱，太容易个性化了！至少目前组内代码，要啥有啥：query与get并存，查询列表和计数的都是get，并未做区分；一会儿remove，一会儿delete；既有save也有insert。当你Ctrl+O的时候，想找个count某元素的方法时贼费劲，急需统一！</p>
<blockquote>
<p>[A]不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。<br><strong>说明</strong>：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。<br><strong>正例</strong>：缓存相关常量放在类CacheConsts下，系统配置相关常量放在类ConfigConsts下。</p>
<p>[A]常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1）跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。<br>2）应用内共享常量：放置在一方库中，通常是modules中的constant目录下。<br>3）子工程内共享常量：当前子工程的constant目录下。<br>4）包内共享常量：当前包下单独的constant目录下。<br>5）类内共享常量：直接在类内部private static final定义。</p>
</blockquote>
<p>　　常量的维护也可运用设计模式思想，单一职责，分层，严格控制作用域，使常量更清晰，易于理解，便于维护。</p>
<blockquote>
<p>[A]类内方法定义顺序依次是：共有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法。但有个<em>规则特例</em>：[A,G]当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起。即<strong>重载永不分离</strong>。<br><strong>说明</strong>：共有方法是类的调用者和维护者最关系的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有Service和DAO的getter/setter方法放在类的最后。</p>
</blockquote>
<p>　　方法的排版要有秩序，这样在我们<code>Ctrl+O</code>的时候才能更方便的查阅方法列表。阿里的约定是比较通用的规则，对此，Google的看法则不同，它认为类的成员顺序不存在唯一的通用法则，重要的是，每个类应该以维护者所能解释的排序逻辑去排序它的成员。<strong>常见的反例</strong>：新的方法总是习惯性地添加到类的结尾，排序毫无意义。</p>
<blockquote>
<p>[A]对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<br><strong>说明</strong>：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。</p>
</blockquote>
<p>　　从死锁产生的条件出发来避免死锁。比如我们根据一批ids批量更新数据库记录时，预先对ids排序，也是一种能有效降低死锁发生概率的措施。</p>
<blockquote>
<p>[A]使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果。</p>
<p>避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed导致的性能下降。<br><strong>说明</strong>：Random实例包括java.util.Random的实例或者Math.random的方式。<br><strong>正例</strong>：在JDK7之后，可以直接使用API ThreadLocalRandom，而在JDK7之前，需要编码保证每个线程持有一个实例。</p>
<p>volatile关键字解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是<strong>如果多写，同样无法解决线程安全问题</strong>。如果是count++操作，使用如下类实现：<code>AtomicInteger count = new AtomicInteger(); count.addAndGet(1)</code>； 如果是JDK8，推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）。</p>
</blockquote>
<p>　　volatile关键字只是保证了同一个变量在多线程中的可见性，更多的是用于修饰作为开关状态的变量。但是<strong>volatile只提供了内存可见性，而没有提供原子性</strong>！volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最近的值刷新到主内存，对于像<code>boolean flag = true</code>等原子性赋值操作是没问题的，但<strong>volatile不能保证复合操作的原子性</strong>，如<code>count++</code>。</p>
<blockquote>
<p>[A]除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行其他复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>
</blockquote>
<p>　　这个笔者之前确实有过这样的坏习惯，为了省略一条赋值语句，将if中的条件搞得比较复杂，代码冗长，可读性也差，得不偿失。</p>
<blockquote>
<p>[A]参数校验与否：<br>需要校验的：1）对外提供的开发接口，不管是RPC/API/HTTP接口；2）敏感权限入口；3）需要极高稳定性和可用性的方法<br>不需校验的：1）极有可能被循环调用的方法。<strong>但在方法说明里必须注明外部参数检查要求</strong>。2）底层调用频度较高的方法。如一般Service会做参数校验，到了DAO层，参数校验可省略。3）被声明为private只会被自己代码所调用的方法，如果能确定传入参数已做过检查或者肯定不会有问题，此时可不校验参数。</p>
</blockquote>
<p>　　过多的参数校验，不仅是冗余代码，而且还影响性能，只在必要的时候做校验。</p>
<blockquote>
<p>1）隶属于用户个人的页面或功能必须进行权限控制校验。<strong>说明</strong>：防止没有做<strong>水平权限校验</strong>就可随意访问、修改、删除别人的数据。<br>2）用户请求传入的任何参数必须做有效性校验。忽略参数校验可能导致：1）page size过大导致内存溢出；2）恶意order by导致数据库慢查询；3）任意重定向；4）SQL注入；5）反序列化注入；6）正则输入源串拒绝服务ReDos<br>3）表单、AJAX提交必须执行CSRF（Cross-site request forgery）安全过滤<br>4）在使用平台资源，譬如短信、邮件、电话、下单、支付，必须<strong>实现正确的防重放机制</strong>，如数量限制、疲劳度控制、验证码校验，避免被滥刷，资损。<br>5）发帖、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p>
</blockquote>
<p>　　基本的安全意识还是要有的，一旦踩了坑，后果不堪设想。</p>
<blockquote>
<p>1）数据库表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsigned tinyint（1表示是，0表示否）。<br>2）<strong>禁用保留字</strong>，如desc、range、match、delayed等，参考MySQL官方保留字。<br>3）主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名为idx_字段名。<br>4）varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果大于此值，则选用text，独立出来一张表，用主键来对应，避免影响其他字段索引效率。<br>5）字段允许适当冗余，以提高查询性能，但必须考虑数据一致性。冗余字段应遵守：1.不是频繁修改；2.不是varchar超长字段，更不能是text字段。<br>6）单表行数超过500万行或者单表容量超过2GB，才推荐分库分表。<br>7）页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>8）若有order by的场景，请注意利用索引的<strong>有序性</strong>。order by最后的字段是组合索引的一部分，并放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。<br>正例：where a=? and b=? order by c; 索引：a_b_c<br>9）利用覆盖索引来进行查询操作，<strong>避免回表</strong>。很形象的比喻：如果一本书需要知道第11章是什么标题，会翻开第11章对应的那一页吗？目录（索引列）浏览一下就好，这个目录就是起到覆盖索引的目的。覆盖索引的explain结果中，extra列会出现：using index。<br>10）利用延迟关联或子查询优化超多分页场景。<strong>说明</strong>：MySQL并不是跳过offset行，而是取offset+N行，然后放弃前offset行，返回N行，那当offset特别大的时候，效率就非常低下。<br>11）建组合索引的时候，<strong>区分度最高的在最左边</strong>。举极端例子：如果where a=? and b=?，a的列几乎接近于唯一值，那么只需单建idx_a索引即可。<br>12）不要使用count(列名)或count(常量)来替代count(*)，count(*)是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。count(列名)会忽略此列为NULL值的行。<br>13）不得使用外键与级联，一切外键概念必须在应用层解决。<strong>外键与级联更新适用于单机低并发</strong>，不适合分布式、高并发集群：级联更新时强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。<br>14）数据订正时，删除和修改记录时，要先select，避免出现误删除，确认无误后才能执行更新语句。<br>15）在表查询中，一律不要使用*作为查询的字段列表，需要哪些字段必须明确写明。<br>16）@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p>
</blockquote>
<p>　　数据库操作的一些基本常识，数据库性能变坏，多数情况是由于上层应用的不合理使用导致的。</p>
<blockquote>
<p>高并发服务器建议调小TCP协议的time_wait超时时间。<br><strong>说明</strong>：操作系统默认240秒后，才会关闭处于time_wait状态的连接，在高并发访问下，服务器端会因为处于time_wait的连接数太多，可能无法建立新的连接，故需要在服务器上调小此阈值。对于Linux服务器，变更/etc/sysctl.conf中的<code>net.ipv4.tcp_fin_timeout</code>。</p>
</blockquote>
<h1 id="个人补充"><a href="#个人补充" class="headerlink" title="个人补充"></a>个人补充</h1><p>　　这里补充一部分手册之外的规范，一些是笔者在实际工作中遇到过，实践过的经验，一些是组内大牛分享实践的，若有不合理的地方还请大家指正。
　　</p>
<blockquote>
<p>1）客户端socket超时配置应区分连接超时和读超时。用connect timeout控制连接建立的超时时间，用read timeout控制流读取数据的超时时间。代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">socket.connect(<span class="keyword">new</span> InetSocketAddress(host, port), <span class="number">2000</span>);  <span class="comment">//设置连接超时为2s。</span></div><div class="line">socket.setSoTimeout(<span class="number">10</span>*<span class="number">1000</span>);  <span class="comment">//设置读超时为10s。</span></div></pre></td></tr></table></figure></p>
<p>2）对于QPS非常高的RPC接口，应该将RPC客户端socket的读超时尽量设短，以便当该接口不可用时，能快速超时返回，使客户端能及时处理，避免上层应用因此环节等待时间过长而将上层服务打垮。<br>例如，<code>socket.setSoTimeout(1000)</code>，将读超时设置为1s。</p>
<p>3）数据库查询时，除了order by需要利用索引的有序性，对于group by操作，在数据量大时，有无利用索引的性能差异特别大。</p>
<p>4）数据库批量操作时，要分批进行，避免一次操作涉及记录数过多，导致事务超时。<br>例如：根据ids批量更新数据，先用Lists.partition分批拆分成多个子list，然后每个list走一次更新，使单个事务尽快结束，分批大小一般设置1000。</p>
<p>5）字符串分割时，用Apache Commons中的StringUtils.splitPreserveAllTokens(…)代替JDK中的str.split(..)，避免JDK对末尾空串的过滤导致结果与预期不一致。</p>
</blockquote>
<p>　　写在最后，笔者想用<code>阿里巴巴Java开发手册</code>的作者孤尽大神的采访名言来结束此文：</p>
<blockquote>
<p>别人都说我们是搬砖的码农，但我们知道自己是追求个性的艺术家。也许我们不会过多在意自己的外表和穿着，但<strong>在我们不羁的外表下，骨子里追求着代码的美、系统的美，代码规范其实就是一个对程序美的定义</strong>。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何优雅地为Struts2的action加监控日志]]></title>
      <url>http://www.yangbing.club/2017/12/04/how-to-add-monitor-log-for-struts2-actions/</url>
      <content type="html"><![CDATA[<p>　　好久没写博客啦，一晃竟已有5个月了，实在是惭愧的很，待整理的checklist还是挺多的，努力一一补上！今天这篇博文源于工作中的一个case：为Struts2中的特定action添加监控日志。对Struts2熟悉的童鞋可能会说，这个不就是常规的aop功能吗，直接利用其自带的拦截器（Interceptor）机制就可轻易实现，so easy！但最终笔者并没有这么干，为何呢？后面会说。这期间，笔者也走了好几条弯路，皆以失败告终，其中牵涉到aop代理的好一些细节知识点，以及一些常见的aop误区，如果没有这些弯路的尝试，可能都不会注意到它，故记录于此，引以为鉴。</p>
<a id="more"></a>
<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>　　最近拿到一个需求：对指定的部分请求增加日志监控，即在方法调用前，做一些统一的业务逻辑判断，对于符合条件的则打印方法名、参数等上下文信息，便于后续统计分析。由于历史原因，当前工程较老，其MVC框架还是基于Struts2的！当然，由于忍受不了Struts2的各种安全漏洞、笨重不堪等问题，该工程的MVC框架也正在向spring MVC迁移。目前的情况是，Struts2和spring MVC并存，而此次所要拦截的请求都属于老的接口，问题就变成如何为Struts2中的action增加日志监控。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、初体验"><a href="#一、初体验" class="headerlink" title="一、初体验"></a>一、初体验</h2><p>　　背景中已提到，项目的MVC框架最终会去掉Struts2并完全切换到spring MVC，因此，<strong>为了避免与Struts2过渡耦合</strong>，一开始我就避开了其自带的Interceptor机制，试图用spring aop来解决它，这样就跟MVC框架无关了，后面即便切换到spring MVC，这块也不用再改动。</p>
<p>　　首先想到了spring中的自动代理创建器，为了与现有的代码保持一致，选用了基于Bean名称匹配的BeanNameAutoProxyCreator，为了讲解的方便，笔者写了个简单的<a href="https://github.com/sherlockyb/blog-demos/tree/master/struts2" target="_blank" rel="external">demo</a>，相关类定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> sherlockyb</div><div class="line"> * @2017年12月9日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span>, <span class="title">ServletResponseAware</span> </span>&#123;</div><div class="line">  ......</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloA</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"say: hello A"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloB</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"say: hello B"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloC</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"say: hello C"</span>);</div><div class="line">  &#125;</div><div class="line">  ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> sherlockyb</div><div class="line"> * @2017年12月10日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(getClass());</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    log.info(<span class="string">"greeting before invocation..."</span>);</div><div class="line">    Object result = invocation.proceed();</div><div class="line">    log.info(<span class="string">"greeting after invocation"</span>);</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　数据库的声明式事务配置<code>appContext-struts2-db.xml</code>如下，之所以要把这个配置专门列出来，因为它与后面的一次报错息息相关，我们暂且往下走。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">class</span>=<span class="string">"org.sherlockyb.blogdemos.struts2.aop.TransactionManagerAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"helloPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.sherlockyb..*HelloService*.*(..))"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"helloPointcut"</span> <span class="attr">order</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　现在需要对<code>helloA</code>和<code>helloB</code>加日志监控，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"greetingInterceptor"</span> <span class="attr">class</span>=<span class="string">"org.sherlockyb.blogdemos.struts2.aop.GreetingMethodInterceptor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>helloAction<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>greetingAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"greetingAdvisor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"greetingInterceptor"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patterns"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　然后用<a href="https://www.getpostman.com/" target="_blank" rel="external">postman</a>测试action请求<code>http://localhost/hello/helloA.action</code>，直接报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">java.lang.NoSuchMethodException: com.sun.proxy.$Proxy39.helloA()</div><div class="line">	at ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:<span class="number">1247</span>)</div><div class="line">	at ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:<span class="number">68</span>)</div><div class="line">	at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:<span class="number">117</span>)</div><div class="line">	at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:<span class="number">108</span>)</div><div class="line">	at ognl.OgnlRuntime.callMethod(OgnlRuntime.java:<span class="number">1370</span>)</div><div class="line">	at ognl.ASTMethod.getValueBody(ASTMethod.java:<span class="number">91</span>)</div><div class="line">	at ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:<span class="number">212</span>)</div><div class="line">	at ognl.SimpleNode.getValue(SimpleNode.java:<span class="number">258</span>)</div><div class="line">	at ognl.Ognl.getValue(Ognl.java:<span class="number">467</span>)</div><div class="line">	at ognl.Ognl.getValue(Ognl.java:<span class="number">431</span>)</div><div class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil$<span class="number">3</span>.execute(OgnlUtil.java:<span class="number">352</span>)</div><div class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:<span class="number">404</span>)</div><div class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:<span class="number">350</span>)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:<span class="number">430</span>)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:<span class="number">290</span>)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:<span class="number">251</span>)</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>　　NoSuchMethodException？奇了怪了，<code>TestAction</code>中明明有<code>helloA</code>方法，并且patterns配置中也加了<code>org.sherlockyb.blogdemos.struts2.web.action.helloA</code>的配置，为啥最终生成的代理类却没有这个方法呢？到底是哪里出了问题？带着这个疑问，我们直接从异常信息着手：既然它报的是<code>$Proxy39</code>这个类没有<code>helloA</code>方法，那我们就来debug看一下<code>$Proxy39</code>究竟有哪些内容。</p>
<p>　　因为<code>OgnlRuntime</code>粒度太细了，太多地方调用，若在这里面打断点还得根据条件断点才能定位到TestAction的调用，比较麻烦，故笔者选择了在调用栈中所处位置较为上层的<code>DefaultActionInvocation</code>。定位到异常信息<code>DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</code>对应的源码，断点打在了源码的第430行，如下：</p>
<p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug1.png" alt="1"></p>
<p>然后debug模式运行应用，截获的debug信息如下：</p>
<p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug2.png" alt="1"></p>
<p>　　从1处可以看出，原来<code>$Proxy39</code>是JDK动态代理生成的代理类，至于为啥是JDK代理，可以注意到变量<strong>proxyTargetClass</strong>默认是<strong>false</strong>的，也就是说spring aop 默认采用JDK动态代理。我们知道，JDK动态代理是面向接口的，只会为目标类所实现的接口生成代理方法，查看2处<code>interface</code>的内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[interface org.apache.struts2.interceptor.ServletRequestAware, interface org.apache.struts2.interceptor.ServletResponseAware, interface com.opensymphony.xwork2.Action, interface com.opensymphony.xwork2.Validateable, interface com.opensymphony.xwork2.ValidationAware, interface com.opensymphony.xwork2.TextProvider, interface com.opensymphony.xwork2.LocaleProvider, interface java.io.Serializable]</div></pre></td></tr></table></figure>
<p>这些不正是<code>TestAction</code>直接（ServletRequestAware等）或间接（Action等）实现的接口嘛，而<code>helloA</code>和<code>helloB</code>是<code>TestAction</code>自定义的方法，并不在这些接口的方法中，那么最终的代理类<code>$Proxy39</code>自然不会含有这俩方法，调用时就会报上述错误。</p>
<h2 id="二、改进"><a href="#二、改进" class="headerlink" title="二、改进"></a>二、改进</h2><p>　　我们的目的是为<code>TestAction</code>中的<code>helloA</code>和<code>helloB</code>方法进行动态代理，但它们不属于<code>TestAction</code>所实现接口中的任何一个方法，显然JDK动态代理满足不了需求，转向CGLib代理，于是将<strong>proxyTargetClass</strong>参数改为<strong>true</strong>，强制其走CGLib代理。配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></div><div class="line">  ......</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  ......</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">……</div></pre></td></tr></table></figure>
<p>依旧用postman测试，依旧报错了：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[ERROR] 2017-12-12 23:17:49,450 [resin-port-80-48] struts2.dispatcher.DefaultDispatcherErrorHandler (CommonsLogger.java:42) -Exception occurred during processing request: Unable to instantiate Action, helloAction,  defined for 'helloA' in namespace '/hello'Error creating bean with name 'helloAction' defined in class path resource [appContext-struts2-action.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.sun.proxy.$Proxy40]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy40</div><div class="line">Unable to instantiate Action, helloAction,  defined for 'helloA' in namespace '/hello'Error creating bean with name 'helloAction' defined in class path resource [appContext-struts2-action.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.sun.proxy.$Proxy40]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy40 - action - file:/D:/DevCode/workspace/blog-demos/struts2/target/classes/org/sherlockyb/blogdemos/struts2/web/action/conf/struts-hello.xml:9:61</div><div class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.createAction(DefaultActionInvocation.java:317)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.init(DefaultActionInvocation.java:398)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionProxy.prepare(DefaultActionProxy.java:194)</div><div class="line">	at org.apache.struts2.impl.StrutsActionProxy.prepare(StrutsActionProxy.java:63)</div><div class="line">	at org.apache.struts2.impl.StrutsActionProxyFactory.createActionProxy(StrutsActionProxyFactory.java:37)</div><div class="line">	at com.opensymphony.xwork2.DefaultActionProxyFactory.createActionProxy(DefaultActionProxyFactory.java:58)</div><div class="line">	at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:565)</div><div class="line">	at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</div><div class="line">	at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</div></pre></td></tr></table></figure>
<p>　　我们可以注意到异常栈中最底层的一条错误信息：<code>Cannot subclass final class class com.sun.proxy.$Proxy40</code>，这条错误是导致上述报错的最根本原因（root cause），其对应的调用链详情如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy40</div><div class="line">	at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:446)</div><div class="line">	at net.sf.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33)</div><div class="line">	at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)</div><div class="line">	at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216)</div><div class="line">	at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)</div><div class="line">	at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285)</div><div class="line">	at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:201)</div></pre></td></tr></table></figure>
<p>　　也就是说，当前面配置的<code>BeanNameAutoProxyCreator</code>尝试为目标类<code>com.sun.proxy.$Proxy40</code>生成CGLib代理时，却发现<strong>这货是final的</strong>！也就是说<strong>JDK动态代理生成的代理类是final的</strong>，你们知道这个知识点嘛？反正在此之前我是没留意过这个，知道的童鞋可举个爪，那说明你走的比我远，要继续保持这样的好奇心。我们言归正传，上述错误表明，在<code>BeanNameAutoProxyCreator</code>生效前，已经有<strong>第三者</strong>为<code>TestAction</code>以JDK动态代理的方式生成了代理类，导致无法再进行CGLib代理。这个第三者到底是谁呢？</p>
<p>　　起初我想到了Struts2的Interceptor机制，会不会是Struts2事先采用JDK动态代理的方式为<code>TestAction</code>生成了代理，以便加上各种Interceptor增强逻辑？很快，我通过debug跟踪Struts2源码否决了这个猜测：</p>
<blockquote>
<p>1、action是交给spring管理的，即<code>StrutsSpringObjectFactory</code>，我们知道action的作用域是<strong>prototype</strong>的，即每来一个请求，Struts2都会通过<code>DefaultActionFactory</code>来buildAction，而实际的创建则是委托给<code>StrutsSpringObjectFactory</code>来处理，也就说Struts2是拿到spring容器构建好的action之后，才做后续的Interceptor过程；</p>
<p>2、通过仔细阅读<code>DefaultActionInvocation</code>的invoke源码可知，Struts2的Interceptor机制既不是通过JDK动态代理来实现，也没有采纳CGLib代理，而是巧用责任链和迭代等代码技巧来实现的，具体细节等后面单独一篇博文细说。</p>
</blockquote>
<p>　　那到底是何方神圣偷偷做了这个事儿呢？<strong>谜底尽在源码中</strong>！通过源码来跟踪下action的创建过程：</p>
<blockquote>
<p>1、<code>DefaultActionInvocation</code>——action的创建（每次请求必走逻辑）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createAction</span><span class="params">(Map&lt;String, Object&gt; contextMap)</span> </span>&#123;</div><div class="line">  <span class="comment">// load action</span></div><div class="line">  String timerKey = <span class="string">"actionCreate: "</span> + proxy.getActionName();</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    UtilTimerStack.push(timerKey);</div><div class="line">    action = objectFactory.buildAction(proxy.getActionName(), proxy.getNamespace(), proxy.getConfig(), contextMap);</div><div class="line">  &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> XWorkException(<span class="string">"Unable to intantiate Action!"</span>, e, proxy.getConfig());</div><div class="line">  &#125;</div><div class="line">  ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2、<code>StrutsSpringObjectFactory</code>——spring容器层面的，bean的创建</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">buildBean</span><span class="params">(String beanName, Map&lt;String, Object&gt; extraContext, <span class="keyword">boolean</span> injectInternal)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Object o;</div><div class="line">  <span class="keyword">if</span> (appContext.containsBean(beanName)) &#123;</div><div class="line">    o = appContext.getBean(beanName);	<span class="comment">//action从spring容器中获取</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    Class beanClazz = getClassInstance(beanName);</div><div class="line">    o = buildBean(beanClazz, extraContext);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (injectInternal) &#123;</div><div class="line">    injectInternalBeans(o);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3、<code>AbstractAutowireCapableBeanFactory</code>——spring容器中，bean的初始化以及之后的postProcess过程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</div><div class="line">  ......</div><div class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</div><div class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException((mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</div><div class="line">					beanName, <span class="string">"Invocation of init method failed"</span>, ex);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//Bean初始化之后，postProcess处理，如一系列的AutoProxyCreator</span></div><div class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123; </div><div class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> wrappedBean;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　最终定位到<code>AspectJAwareAdvisorAutoProxyCreator</code>，直接看debug调用栈：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug3.png" alt="1"></p>
<p>　　首先，我们先看下<code>wrapIfNecessary</code>的核心代码片段如下，其大致功能就是为目标bean创建代理类：先看下bean有没有相关的advice，如果有，则通过createProxy为其创建代理类；否则直接返回原始bean！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</div><div class="line">		......</div><div class="line">		<span class="comment">// Create proxy if we have advice.</span></div><div class="line">		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</div><div class="line">			<span class="keyword">this</span>.advisedBeans.add(cacheKey);</div><div class="line">			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</div><div class="line">			<span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</div><div class="line">			<span class="keyword">return</span> proxy;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.nonAdvisedBeans.add(cacheKey);</div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这里bean的debug信息如下：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug4.png" alt="1"></p>
<p><code>HelloAction@3d696299</code>，这正是我们在xml中定义的原始bean实例！也就说，<code>AspectJAwareAdvisorAutoProxyCreator</code>就是传说中的第三者。那么问题来了：<code>AspectJAwareAdvisorAutoProxyCreator</code>是在什么情况下又是何时被创建的呢？我们并没有显式地在哪里指定，要让它为<code>HelloAction</code>创建代理，这二者是如何关联的起来的呢？</p>
<p>　　在eclipse中，定位到<code>AspectJAwareAdvisorAutoProxyCreator</code>类的源码，选中其类名，直接<code>Ctrl+Shift+G</code>查看其在workspace中的所有引用（reference）如下：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug5.png" alt="1"></p>
<p>　　进一步跟进<code>registerAspectJAutoProxyCreatorIfNecessary</code>方法，直接<code>Ctrl+Shift+H</code>查看该方法的上层调用链：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug6.png" alt="debug6"></p>
<p>　　到这里第一个问题就比较清晰了：由于<code>appContext-struts2-db.xml</code>中通过<code>&lt;aop:config&gt;</code>为数据库操作配置了声明式事务，导致<code>AspectJAwareAdvisorAutoProxyCreator</code>实例的构建。我们再来看第二个问题，即这个AutoProxyCreator是如何与HelloAction关联的，回顾下前面的<code>wrapIfNecessary</code>的源码片段，其中有一个<code>getAdvicesAndAdvisorsForBean</code>方法，它是定义在抽象类AbstractAutoProxyCreator中的抽象方法，其功能如下方的官方注释所说：判断当前目标bean是否需要代理，如果是则返回对应的增强（advice）或切面（advisor）集。具体实现则交给各具体的子类，典型的模板方法设计。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return whether the given bean is to be proxied, what additional</div><div class="line">  * advices (e.g. AOP Alliance interceptors) and advisors to apply.</div><div class="line">  */</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">abstract</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource customTargetSource) <span class="keyword">throws</span> BeansException;</div></pre></td></tr></table></figure>
<p><code>AbstractAutoProxyCreator</code>类的继承结构如下：</p>
<p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug7.png" alt="1"></p>
<p>其中的<code>AbstractAdvisorAutoProxyCreator</code>很关键，它是第三者<code>AspectJAwareAdvisorAutoProxyCreator</code>的直接父类，并实现抽象方法<code>getAdvicesAndAdvisorsForBean</code>，逻辑如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource) &#123;</div><div class="line">	List advisors = findEligibleAdvisors(beanClass, beanName);	<span class="comment">//找出bean相关的advisors</span></div><div class="line">	<span class="keyword">if</span> (advisors.isEmpty()) &#123;</div><div class="line">      <span class="keyword">return</span> DO_NOT_PROXY;	<span class="comment">//如果没有advisor，则直接返回约定的DO_NOT_PROXY，表示无需代理</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> advisors.toArray();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看下<code>findEligibleAdvisors</code>具体做了什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class beanClass, String beanName)</span> </span>&#123;</div><div class="line">  <span class="comment">//获取当前spring容器中所有的Advisor，除了FactoryBean类型的和目前已构建过的</span></div><div class="line">  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</div><div class="line">  List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);	<span class="comment">//从中筛选出可以应用在bean上的advisor</span></div><div class="line">  extendAdvisors(eligibleAdvisors);</div><div class="line">  <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</div><div class="line">    eligibleAdvisors = sortAdvisors(eligibleAdvisors);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> eligibleAdvisors;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终通过层层代码跳转，我们来到了<code>AopUtils</code>中判定advisor与bean是否匹配的关键逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canApply</span><span class="params">(Pointcut pc, Class&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;	<span class="comment">//先看类级别是否匹配，不匹配就直接返回false</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//方法匹配器：切点的一部分，判定目标方法是否与切点表达式匹配</span></div><div class="line">  MethodMatcher methodMatcher = pc.getMethodMatcher();</div><div class="line">  IntroductionAwareMethodMatcher introductionAwareMethodMatcher = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">if</span> (methodMatcher <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</div><div class="line">    introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</div><div class="line">  &#125;</div><div class="line">  Set&lt;Class&gt; classes = <span class="keyword">new</span> HashSet&lt;Class&gt;(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</div><div class="line">  classes.add(targetClass);</div><div class="line">  <span class="comment">/**这里的classes由两部分组成：一个是目标类所实现的所有接口；一个是目标类本身(targetClass)。结合下面的循环扫描Methods的逻辑，也就是说，它会扫描目标类所实现的所有接口中定义的方法和目标类自身定义的方法</span></div><div class="line">  */</div><div class="line">  <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</div><div class="line">    Method[] methods = clazz.getMethods();</div><div class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">      <span class="keyword">if</span> ((introductionAwareMethodMatcher != <span class="keyword">null</span> &amp;&amp; </div><div class="line">           introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||</div><div class="line">           methodMatcher.matches(method, targetClass)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　看到这儿整个流程就清晰了：由于我们配置了<code>greetingAdvisor</code>，并且<code>patterns</code>与<code>HelloAction</code>中的<code>helloA</code>和<code>helloB</code>匹配，导致相应的<code>advisor</code>与目标bean（HelloAction）关联了，即<code>getAdvicesAndAdvisorsForBean</code>返回的<code>Interceptors</code>不为<code>DO_NOT_PROXY</code>，于是走了下面的<code>createProxy</code>逻辑，又因为<code>AspectJAwareAdvisorAutoProxyCreator</code>的配置项<code>proxyTargetClass</code>默认是false的，进而为<code>HelloAction</code>创建了JDK动态代理。</p>
<h2 id="三、最终版"><a href="#三、最终版" class="headerlink" title="三、最终版"></a>三、最终版</h2><p>　　经过上述两次错误分析，我们得知以下几点：</p>
<blockquote>
<p>1、首先使用CGLib的方式为<code>HelloAction</code>创建代理是必须的，因为我们所要代理的方法是<code>HelloAction</code>自定义的，且不在其所实现接口的方法列表中，面向接口的JDK动态代理行不通；</p>
<p>2、只要当前应用中别的地方事先配置了<code>&lt;aop:config&gt;</code>（比如最常用的声明式事务），就无法使用<code>BeanNameAutoProxyCreator</code>的方式为<code>HelloAction</code>创建CGLib代理！因为要为目标类的部分方法生成代理，其配置项<code>interceptorNames</code>就只能用<code>Advisor</code>而非普通的bean名称，而<code>Advisor</code>又会被<code>AspectJAwareAdvisorAutoProxyCreator</code>扫描到，最终导致上述二次代理的问题。</p>
</blockquote>
<p>　　最终去掉了<code>BeanNameAutoProxyCreator</code>和<code>greetingAdvisor</code>，改为<code>&lt;aop:config&gt;</code>通过指定<code>proxy-target-class</code>为true强制<code>AspectJAwareAdvisorAutoProxyCreator</code>走CGLib代理，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt-greet"</span> <span class="attr">expression</span>=<span class="string">"( execution(* org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloA(..)) or execution(* org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloB(..)) )"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">id</span>=<span class="string">"ad-greet"</span> <span class="attr">advice-ref</span>=<span class="string">"greetingInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt-greet"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　最后的拦截效果如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[INFO] <span class="number">2017</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">03</span>,<span class="number">972</span> [resin-port-<span class="number">80</span>-<span class="number">51</span>] struts2.aop.GreetingMethodInterceptor (GreetingMethodInterceptor.java:<span class="number">33</span>) -greeting before invocation...</div><div class="line">say: hello A</div><div class="line">[INFO] <span class="number">2017</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">234</span> [resin-port-<span class="number">80</span>-<span class="number">51</span>] struts2.aop.GreetingMethodInterceptor (GreetingMethodInterceptor.java:<span class="number">35</span>) -greeting after invocation</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="一、JDK与CGLib动态代理的本质区别"><a href="#一、JDK与CGLib动态代理的本质区别" class="headerlink" title="一、JDK与CGLib动态代理的本质区别"></a>一、JDK与CGLib动态代理的本质区别</h2><h3 id="1-1-JDK动态代理"><a href="#1-1-JDK动态代理" class="headerlink" title="1.1 JDK动态代理"></a>1.1 JDK动态代理</h3><p>　　<strong>JDK动态代理是面向接口</strong>的，即被代理的目标类必须实现接口，且最终只会为目标类所实现的所有接口中的方法生成代理方法，对于目标类中包含的但是非接口中的方法，是不会生成对应的代理方法，methodA和methodB就是例子，这是由JDK代理的实现机制所决定了的：通过继承自Proxy类，实现目标类所实现的接口来生成代理类。</p>
<p>　　JDK动态代理生成的代理类，以$Proxy开头，后面的计数数字表示当前生成的是第几个代理类。且<strong>代理类是final的</strong>，不可被继承。</p>
<h3 id="1-2-CGLib动态代理"><a href="#1-2-CGLib动态代理" class="headerlink" title="1.2 CGLib动态代理"></a>1.2 CGLib动态代理</h3><p>　　而CGLib则是通过继承目标类，得到其子类的方式生成代理，而final类是不能被继承的，因为CGLib无法为final类生成代理。</p>
<p>　　CGLib代理生成的代理类含有<code>$$</code>，比如<code>HelloAction$$EnhancerByCGLIB$$ff7d443b</code>。</p>
<h2 id="二、对aop的不熟练所引发的问题"><a href="#二、对aop的不熟练所引发的问题" class="headerlink" title="二、对aop的不熟练所引发的问题"></a>二、对aop的不熟练所引发的问题</h2><p>　　对aop的不熟练，使得我们在用的时候，往往就容易忽视了一些细节，如当前采用的动态代理是JDK的还是CGLib的，默认选择是什么？都有哪些配置项，配置项的默认值，以及各配置项对最终生成代理结果的影响如何？当前类是否被多次代理？当出现了多次代理，代理的顺序又是如何？</p>
<p>　　对于第二次报错，其本质问题是属于<strong>二次代理</strong>的问题。有网友也遇到过类似的问题——<a href="http://www.cnblogs.com/study-everyday/p/7429298.html" target="_blank" rel="external">记一次Spring的aop代理Mybatis的DAO所遇到的问题</a>，只不过是在MyBatis上踩的坑，后续将会针对spring aop单独另开博文详解，尽情期待~</p>
<h2 id="三、Struts2的Interceptor机制原理"><a href="#三、Struts2的Interceptor机制原理" class="headerlink" title="三、Struts2的Interceptor机制原理"></a>三、Struts2的Interceptor机制原理</h2><p>　　Struts2的Interceptor机制是属于aop功能，按理说用常规的动态代理就可实现。但是由<a href="#一、初体验">初体验</a> 小节中debug过程可知，它并没有基于常规的动态字节码技术如JDK动态代理、CGLib动态代理等，而是通过责任链模式和迭代的巧妙结合，实现了aop的功能，有兴趣的话也可研究一下。</p>
]]></content>
      
        <categories>
            
            <category> Struts2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Struts2 </tag>
            
            <tag> aop </tag>
            
            <tag> spring </tag>
            
            <tag> CGLib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重新看待Jar包冲突问题及解决方案]]></title>
      <url>http://www.yangbing.club/2017/07/15/solution-for-jar-conflicts/</url>
      <content type="html"><![CDATA[<p>　　Jar包冲突是老生常谈的问题，几乎每一个Java程序猿都不可避免地遇到过，并且也都能想到通常的原因一般是同一个Jar包由于maven传递依赖等原因被引进了多个不同的版本而导致，可采用依赖排除、依赖管理等常规方式来尝试解决该问题，但这些方式真正能彻底解决该冲突问题吗？答案是否定的。笔者之所以将文章题目起为“重新看待”，是因为之前对于Jar包冲突问题的理解仅仅停留在前面所说的那些，直到在工作中遇到的一系列Jar包冲突问题后，才发现并不是那么简单，对该问题有了重新的认识，接下来本文将围绕Jar包冲突的问题本质和相关的解决方案这两个点进行阐述。</p>
<a id="more"></a>
<h1 id="Jar包冲突问题"><a href="#Jar包冲突问题" class="headerlink" title="Jar包冲突问题"></a>Jar包冲突问题</h1><h2 id="一、冲突的本质"><a href="#一、冲突的本质" class="headerlink" title="一、冲突的本质"></a>一、冲突的本质</h2><p>　　Jar包冲突的本质是什么？Google了半天也没找到一个让人满意的完整定义。其实，我们可以从Jar包冲突产生的结果来总结，在这里给出如下定义（此处如有不妥，欢迎拍砖~-~）：</p>
<blockquote>
<p> <strong>Java应用程序因某种因素，加载不到正确的类而导致其行为跟预期不一致。</strong></p>
</blockquote>
<p>　　具体来说可分为两种情况：1）应用程序依赖的同一个Jar包出现了多个不同版本，并选择了错误的版本而导致JVM加载不到需要的类或加载了错误版本的类，为了叙述的方便，笔者称之为<strong>第一类Jar包冲突问题</strong>；2）同样的类（类的全限定名完全一样）出现在多个不同的依赖Jar包中，即该类有多个版本，并由于Jar包加载的先后顺序导致JVM加载了错误版本的类，称之为<strong>第二类Jar包问题</strong>。这两种情况所导致的结果其实是一样的，都会使应用程序加载不到正确的类，那其行为自然会跟预期不一致了，以下对这两种类型进行详细分析。</p>
<h3 id="1-1-同一个Jar包出现了多个不同版本"><a href="#1-1-同一个Jar包出现了多个不同版本" class="headerlink" title="1.1 同一个Jar包出现了多个不同版本"></a>1.1 同一个Jar包出现了多个不同版本</h3><p>　　随着Jar包迭代升级，我们所依赖的开源的或公司内部的Jar包工具都会存在若干不同的版本，而版本升级自然就避免不了类的方法签名变更，甚至于类名的更替，而我们当前的应用程序往往依赖特定版本的某个类 <strong>M</strong> ，由于maven的传递依赖而导致同一个Jar包出现了多个版本，当maven的仲裁机制选择了错误的版本时，而恰好类 <strong>M</strong>在该版本中被去掉了，或者方法签名改了，导致应用程序因找不到所需的类 <strong>M</strong>或找不到类 <strong>M</strong>中的特定方法，就会出现第一类Jar冲突问题。可总结出该类冲突问题发生的以下三个必要条件：</p>
<ul>
<li>由于maven的传递依赖导致依赖树中出现了同一个Jar包的多个版本</li>
<li>该Jar包的多个版本之间存在接口差异，如类名更替，方法签名更替等，且应用程序依赖了其中有变更的类或方法</li>
<li>maven的仲裁机制选择了错误的版本</li>
</ul>
<h3 id="1-2-同一个类出现在多个不同Jar包中"><a href="#1-2-同一个类出现在多个不同Jar包中" class="headerlink" title="1.2 同一个类出现在多个不同Jar包中"></a>1.2 同一个类出现在多个不同Jar包中</h3><p>　　同样的类出现在了应用程序所依赖的两个及以上的不同Jar包中，这会导致什么问题呢？我们知道，同一个类加载器对于同一个类只会加载一次（多个不同类加载器就另说了，这也是解决Jar包冲突的一个思路，后面会谈到），那么当一个类出现在了多个Jar包中，假设有 <strong>A</strong> 、 <strong>B</strong> 、 <strong>C</strong> 等，由于Jar包依赖的路径长短、声明的先后顺序或文件系统的文件加载顺序等原因，类加载器首先从Jar包 <strong>A</strong> 中加载了该类后，就不会加载其余Jar包中的这个类了，那么问题来了：如果应用程序此时需要的是Jar包 <strong>B</strong> 中的类版本，并且该类在Jar包 <strong>A</strong> 和 <strong>B</strong> 中有差异（方法不同、成员不同等等），而JVM却加载了Jar包 <strong>A</strong> 的中的类版本，与期望不一致，自然就会出现各种诡异的问题。</p>
<p>　　从上面的描述中，可以发现出现不同Jar包的冲突问题有以下三个必要条件：</p>
<ul>
<li>同一个类 <strong>M</strong> 出现在了多个依赖的Jar包中，为了叙述方便，假设还是两个： <strong>A</strong> 和 <strong>B</strong></li>
<li>Jar包 <strong>A</strong> 和 <strong>B</strong> 中的该类 <strong>M</strong> 有差异，无论是方法签名不同也好，成员变量不同也好，只要可以造成实际加载的类的行为和期望不一致都行。如果说Jar包 <strong>A</strong> 和 <strong>B</strong> 中的该类完全一样，那么类加载器无论先加载哪个Jar包，得到的都是同样版本的类 <strong>M</strong> ，不会有任何影响，也就不会出现Jar包冲突带来的诡异问题。</li>
<li>加载的类 <strong>M</strong> 不是所期望的版本，即加载了错误的Jar包</li>
</ul>
<h2 id="二、冲突的产生原因"><a href="#二、冲突的产生原因" class="headerlink" title="二、冲突的产生原因　　"></a>二、冲突的产生原因　　</h2><h3 id="2-1-maven仲裁机制"><a href="#2-1-maven仲裁机制" class="headerlink" title="2.1 maven仲裁机制"></a>2.1 maven仲裁机制</h3><p>　　当前maven大行其道，说到第一类Jar包冲突问题的产生原因，就不得不提<a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="external">maven的依赖机制</a>了。传递性依赖是Maven2.0引入的新特性，让我们只需关注直接依赖的Jar包，对于间接依赖的Jar包，Maven会通过解析从远程仓库获取的依赖包的pom文件来隐式地将其引入，这为我们开发带来了极大的便利，但与此同时，也带来了常见的问题——版本冲突，即同一个Jar包出现了多个不同的版本，针对该问题Maven也有一套仲裁机制来决定最终选用哪个版本，但<strong>Maven的选择往往不一定是我们所期望的</strong>，这也是产生Jar包冲突最常见的原因之一。先来看下Maven的仲裁机制：</p>
<ul>
<li>优先按照依赖管理<strong>&lt;dependencyManagement&gt;</strong>元素中指定的版本声明进行仲裁，此时下面的两个原则都无效了</li>
<li>若无版本声明，则按照“短路径优先”的原则（Maven2.0）进行仲裁，即选择依赖树中路径最短的版本</li>
<li>若路径长度一致，则按照“第一声明优先”的原则进行仲裁，即选择POM中最先声明的版本</li>
</ul>
<p>　　从maven的仲裁机制中可以发现，除了第一条仲裁规则（这也是解决Jar包冲突的常用手段之一）外，后面的两条原则，对于同一个Jar包不同版本的选择，maven的选择有点“一厢情愿”了，也许这是maven研发团队在总结了大量的项目依赖管理经验后得出的两条结论，又或者是发现根本找不到一种统一的方式来满足所有场景之后的无奈之举，可能这对于多数场景是适用的，但是<strong>它不一定适合我——当前的应用</strong>，因为每个应用都有其特殊性，该依赖哪个版本，maven没办法帮你完全搞定，如果你没有规规矩矩地使用<strong>&lt;dependencyManagement&gt;</strong>来进行依赖管理，就注定了逃脱不了第一类Jar包冲突问题。</p>
<h3 id="2-1-Jar包的加载顺序"><a href="#2-1-Jar包的加载顺序" class="headerlink" title="2.1 Jar包的加载顺序"></a>2.1 Jar包的加载顺序</h3><p>　　对于第二类Jar包冲突问题，即多个不同的Jar包有类冲突，这相对于第一类问题就显得更为棘手。为什么这么说呢？在这种情况下，两个不同的Jar包，假设为 <strong>A</strong>、 <strong>B</strong>，它们的名称互不相同，甚至可能完全不沾边，如果不是出现冲突问题，你可能都不会发现它们有共有的类！对于A、B这两个Jar包，maven就显得无能为力了，因为maven只会为你针对同一个Jar包的不同版本进行仲裁，而这俩是属于不同的Jar包，超出了maven的依赖管理范畴。此时，当A、B都出现在应用程序的类路径下时，就会存在潜在的冲突风险，即A、B的加载先后顺序就决定着JVM最终选择的类版本，如果选错了，就会出现诡异的第二类冲突问题。</p>
<p>　　那么Jar包的加载顺序都由哪些因素决定的呢？具体如下：</p>
<ul>
<li>Jar包所处的加载路径，或者换个说法就是加载该Jar包的类加载器在JVM类加载器树结构中所处层级。由于JVM类加载的双亲委派机制，层级越高的类加载器越先加载其加载路径下的类，顾名思义，引导类加载器（bootstrap ClassLoader，也叫启动类加载器）是最先加载其路径下Jar包的，其次是扩展类加载器（extension ClassLoader），再次是系统类加载器（system ClassLoader，也就是应用加载器appClassLoader），Jar包所处加载路径的不同，就决定了它的加载顺序的不同。比如我们在eclipse中配置web应用的resin环境时，对于依赖的Jar包是添加到<code>Bootstrap Entries</code>中还是<code>User Entries</code>中呢，则需要仔细斟酌下咯。</li>
<li>文件系统的文件加载顺序。这个因素很容易被忽略，而往往又是因环境不一致而导致各种诡异冲突问题的罪魁祸首。因tomcat、resin等容器的ClassLoader获取加载路径下的文件列表时是不排序的，这就依赖于底层文件系统返回的顺序，那么当不同环境之间的文件系统不一致时，就会出现有的环境没问题，有的环境出现冲突。例如，对于Linux操作系统，返回顺序则是由iNode的顺序来决定的，如果说测试环境的Linux系统与线上环境不一致时，就极有可能出现典型案例：测试环境怎么测都没问题，但一上线就出现冲突问题，规避这种问题的最佳办法就是尽量保证测试环境与线上一致。</li>
</ul>
<h2 id="三、冲突的表象"><a href="#三、冲突的表象" class="headerlink" title="三、冲突的表象"></a>三、冲突的表象</h2><p>　　Jar包冲突可能会导致哪些问题？通常发生在编译或运行时，主要分为两类问题：一类是比较直观的也是最为常见的错误是抛出各种运行时异常，还有一类就是比较隐晦的问题，它不会报错，其表现形式是应用程序的行为跟预期不一致，分条罗列如下：</p>
<ul>
<li><strong>java.lang.ClassNotFoundException</strong>，即java类找不到。这类典型异常通常是由于，没有在依赖管理中声明版本，maven的仲裁的时候选取了错误的版本，而这个版本缺少我们需要的某个class而导致该错误。例如httpclient-4.4.jar升级到httpclient-4.36.jar时，类org.apache.http.conn.ssl.NoopHostnameVerifier被去掉了，如果此时我们本来需要的是4.4版本，且用到了NoopHostnameVerifier这个类，而maven仲裁时选择了4.6，则会导致ClassNotFoundException异常。</li>
<li><strong>java.lang.NoSuchMethodError</strong>，即找不到特定方法，第一类冲突和第二类冲突都可能导致该问题——加载的类不正确。若是第一类冲突，则是由于错误版本的Jar包与所需要版本的Jar包中的类接口不一致导致，例如antlr-2.7.2.jar升级到antlr-2.7.6.Jar时，接口antlr.collections.AST.getLine()发生变动，当maven仲裁选择了错误版本而加载了错误版本的类AST，则会导致该异常；若是第二类冲突，则是由于不同Jar包含有的同名类接口不一致导致，<strong>典型的案例</strong>：Apache的commons-lang包，2.x升级到3.x时，包名直接从commons-lang改为commons-lang3，部分接口也有所改动，由于包名不同和传递性依赖，经常会出现两种Jar包同时在classpath下，org.apache.commons.lang.StringUtils.isBlank就是其中有差异的接口之一，由于Jar包的加载顺序，导致加载了错误版本的StringUtils类，就可能出现NoSuchMethodError异常。</li>
<li><strong>java.lang.NoClassDefFoundError</strong>，<strong>java.lang.LinkageError</strong>等，原因和上述雷同，就不作具体案例分析了。</li>
<li><strong>没有报错异常，但应用的行为跟预期不一致</strong>。这类问题同样也是由于运行时加载了错误版本的类导致，但跟前面不同的是，冲突的类接口都是一致的，但具体实现逻辑有差异，当我们加载的类版本不是我们需要的实现逻辑，就会出现行为跟预期不一致问题。这类问题通常发生在我们自己内部实现的多个Jar包中，由于包路径和类名命名不规范等问题，导致两个不同的Jar包出现了接口一致但实现逻辑又各不相同的同名类，从而引发此问题。</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、问题排查和解决"><a href="#一、问题排查和解决" class="headerlink" title="一、问题排查和解决"></a>一、问题排查和解决</h2><ol>
<li>如果有异常堆栈信息，根据错误信息即可定位导致冲突的类名，然后在eclipse中<code>CTRL+SHIFT+T</code>或者在idea中<code>CTRL+N</code>就可发现该类存在于多个依赖Jar包中</li>
<li>若步骤1无法定位冲突的类来自哪个Jar包，可在应用程序启动时加上JVM参数<code>-verbose:class</code>或者<code>-XX:+TraceClassLoading</code>，日志里会打印出每个类的加载信息，如来自哪个Jar包</li>
<li>定位了冲突类的Jar包之后，通过<code>mvn dependency:tree -Dverbose -Dincludes=&lt;groupId&gt;:&lt;artifactId&gt;</code>查看是哪些地方引入的Jar包的这个版本</li>
<li>确定Jar包来源之后，如果是第一类Jar包冲突，则可用<strong>&lt;excludes&gt;</strong>排除不需要的Jar包版本或者在依赖管理<strong>&lt;dependencyManagement&gt;</strong>中申明版本；若是第二类Jar包冲突，如果可排除，则用<strong>&lt;excludes&gt;</strong>排掉不需要的那个Jar包，若不能排，则需考虑Jar包的升级或换个别的Jar包。当然，除了这些方法，还可以从类加载器的角度来解决该问题，可参考博文——<a href="http://www.shop988.com/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0jar%E5%8C%85%E9%9A%94%E7%A6%BB.html" target="_blank" rel="external">如果jar包冲突不可避免，如何实现jar包隔离</a>，其思路值得借鉴。</li>
</ol>
<h2 id="二、有效避免"><a href="#二、有效避免" class="headerlink" title="二、有效避免"></a>二、有效避免</h2><p>　　从上一节的解决方案可以发现，当出现第二类Jar包冲突，且冲突的Jar包又无法排除时，问题变得相当棘手，这时候要处理该冲突问题就需要较大成本了，所以，最好的方式是<strong>在冲突发生之前能有效地规避之</strong>！就好比数据库死锁问题，死锁避免和死锁预防就显得相当重要，若是等到真正发生死锁了，常规的做法也只能是回滚并重启部分事务，这就捉襟见肘了。那么怎样才能有效地规避Jar包冲突呢？</p>
<h3 id="2-1-良好的习惯：依赖管理"><a href="#2-1-良好的习惯：依赖管理" class="headerlink" title="2.1 良好的习惯：依赖管理"></a>2.1 良好的习惯：依赖管理</h3><p>　　对于第一类Jar包冲突问题，通常的做法是用<strong>&lt;excludes&gt;</strong>排除不需要的版本，但这种做法带来的问题是每次引入带有传递性依赖的Jar包时，都需要一一进行排除，非常麻烦。maven为此提供了集中管理依赖信息的机制，即依赖管理元素<strong>&lt;dependencyManagement&gt;</strong>，对依赖Jar包进行统一版本管理，一劳永逸。通常的做法是，在parent模块的pom文件中尽可能地声明所有相关依赖Jar包的版本，并在子pom中简单引用该构件即可。</p>
<p>　　来看个示例，当开发时确定使用的httpclient版本为4.5.1时，可在父pom中配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>　　然后各个需要依赖该Jar包的子pom中配置如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="2-2-冲突检测插件"><a href="#2-2-冲突检测插件" class="headerlink" title="2.2 冲突检测插件"></a>2.2 冲突检测插件</h3><p>　　对于第二类Jar包冲突问题，前面也提到过，其核心在于同名类出现在了多个不同的Jar包中，如果人工来排查该问题，则需要逐个点开每个Jar包，然后相互对比看有没同名的类，那得多么浪费精力啊？！好在这种费时费力的体力活能交给程序去干。<strong>maven-enforcer-plugin</strong>，这个强大的maven插件，配合<strong>extra-enforcer-rules</strong>工具，能自动扫描Jar包将冲突检测并打印出来，汗颜的是，笔者工作之前居然都没听过有这样一个插件的存在，也许是没遇到像工作中这样的冲突问题，算是涨姿势了。其原理其实也比较简单，通过扫描Jar包中的class，记录每个class对应的Jar包列表，如果有多个即是冲突了，故不必深究，我们只需要关注如何用它即可。</p>
<p>　　在<strong>最终需要打包运行的应用模块pom</strong>中，引入maven-enforcer-plugin的依赖，在build阶段即可发现问题，并解决它。比如对于具有parent pom的多模块项目，需要将插件依赖声明在应用模块的pom中。这里有童鞋可能会疑问，为什么不把插件依赖声明在parent pom中呢？那样依赖它的应用子模块岂不是都能复用了？这里之所以强调“打包运行的应用模块pom”，是因为冲突检测针对的是最终集成的应用，关注的是应用运行时是否会出现冲突问题，而每个不同的应用模块，各自依赖的Jar包集合是不同的，由此而产生的<strong>&lt;ignoreClasses&gt;</strong>列表也是有差异的，因此只能针对应用模块pom分别引入该插件。</p>
<p>先看示例用法如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-enforcer-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rules</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">dependencyConvergence</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>enforce-ban-duplicate-classes<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rules</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">banDuplicateClasses</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ignoreClasses</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>javax.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.junit.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>net.sf.cglib.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.apache.commons.logging.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.springframework.remoting.rmi.RmiInvocationHandler<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ignoreClasses</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">findAllDuplicates</span>&gt;</span>true<span class="tag">&lt;/<span class="name">findAllDuplicates</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">banDuplicateClasses</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">fail</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fail</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>extra-enforcer-rules<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-beta-6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　maven-enforcer-plugin是通过很多预定义的标准规则（<a href="http://maven.apache.org/enforcer/enforcer-rules/index.html" target="_blank" rel="external">standard rules</a>）和用户自定义规则，来约束maven的环境因素，如maven版本、JDK版本等等，它有很多好用的特性，具体可参见<a href="http://maven.apache.org/enforcer/maven-enforcer-plugin/" target="_blank" rel="external">官网</a>。而Extra Enforcer Rules则是<em>MojoHaus</em>项目下的针对maven-enforcer-plugin而开发的提供额外规则的插件，这其中就包含前面所提的重复类检测功能，具体用法可参见<a href="http://www.mojohaus.org/extra-enforcer-rules/" target="_blank" rel="external">官网</a>，这里就不详细叙述了。</p>
<h1 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h1><h2 id="第一类Jar包冲突"><a href="#第一类Jar包冲突" class="headerlink" title="第一类Jar包冲突"></a>第一类Jar包冲突</h2><p>　　这类Jar包冲突是最常见的也是相对比较好解决的，已经在<a href="#三、冲突的表象">三、冲突的表象</a>这节中列举了部分案例，这里就不重复列举了。</p>
<h2 id="第二类Jar包冲突"><a href="#第二类Jar包冲突" class="headerlink" title="第二类Jar包冲突"></a>第二类Jar包冲突</h2><h3 id="Spring2-5-6与Spring3-x"><a href="#Spring2-5-6与Spring3-x" class="headerlink" title="Spring2.5.6与Spring3.x"></a>Spring2.5.6与Spring3.x</h3><p>　　Spring2.5.6与Spring3.x，从单模块拆分为多模块，Jar包名称（artifactId）也从spring变为spring-submoduleName，如<br>spring-context、spring-aop等等，并且也有少部分接口改动（Jar包升级的过程中，这也是在所难免的）。由于是不同的Jar包，经maven的传递依赖机制，就会经常性的存在这俩版本的Spring都在classpath中，从而引发潜在的冲突问题。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从kinit到kerberos安全机制]]></title>
      <url>http://www.yangbing.club/2017/06/04/from-kinit-to-kerberos-security-mechanism/</url>
      <content type="html"><![CDATA[<p>　　最近老在项目的shell脚本中看到kinit这个东西，完整的命令是</p>
<p>　　 <code>kinit -k -t ./conf/kerberos.keytab sherlocky/admin@EXAMPLE.COM</code></p>
<p>　　查阅一番资料后了解到，之所以有这个命令，是由于该shell脚本接下来会访问Hadoop集群，从上面拉取文件做一些处理任务，并将结果存到Hadoop集群上，那么该命令的作用就是进行身份验证（Authentication），确保Hadoop集群资源的安全。这里就牵扯到kerberos协议，本文接下来将对此一一阐述。</p>
<a id="more"></a>
<h2 id="一、kinit命令"><a href="#一、kinit命令" class="headerlink" title="一、kinit命令"></a>一、kinit命令</h2><p>　　Kinit命令用于获取和缓存principal（当前主体）初始的票据授予票据（TGT），此票据用于Kerberos系统进行身份安全验证，实际上它是MIT在版权许可的条件下为kerberos协议所研发的免费实现工具<a href="http://web.mit.edu/kerberos/dist/index.html" target="_blank" rel="external">MIT Kerberos</a>（当前最新版本为<a href="https://web.mit.edu/kerberos/krb5-1.15/" target="_blank" rel="external">krb5-1.15.1</a>）的一部分，相关的配套命令还有<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/klist.html" target="_blank" rel="external">klist</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kdestroy.html" target="_blank" rel="external">kdestory</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kpasswd.html" target="_blank" rel="external">kpasswd</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/krb5-config.html" target="_blank" rel="external">krb5-config</a>等等，基本用法如下：</p>
<p><strong>kinit</strong> [-<strong>V</strong>][-<strong>l</strong> <em>lifetime</em>] [-<strong>s</strong> <em>start_time</em>][-<strong>r</strong> <em>renewable_life</em>][-<strong>p</strong> | -<strong>P</strong>][-<strong>f</strong> | -<strong>F</strong>][-<strong>a</strong>][-<strong>A</strong>][-<strong>C</strong>][-<strong>E</strong>][-<strong>v</strong>][-<strong>R</strong>][-<strong>k</strong> [-<strong>t</strong> <em>keytab_file</em>]][-<strong>c</strong> <em>cache_name</em>][-<strong>n</strong>][-<strong>S</strong> <em>service_name</em>][-<strong>I</strong> <em>input_ccache</em>][-<strong>T</strong> <em>armor_ccache</em>][-<strong>X</strong> <em>attribute</em>[<em>=value</em>]][<em>principal</em>]</p>
<p>　　各选项具体含义都不做介绍了，可参考<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kinit.html" target="_blank" rel="external">官网</a>，较常用的方式就如前言所示，根据指定的事先生成的kerberos.keytab文件为指定个体进行验证。验证通过后，就可以像平常一样进行Hadoop系列操作。那么它是如何进行验证的呢？其中的过程和原理又是怎样的？下面要介绍的kerberos协议细节将会回答你的疑惑。</p>
<h2 id="二、Kerberos协议"><a href="#二、Kerberos协议" class="headerlink" title="二、Kerberos协议"></a>二、Kerberos协议</h2><p>　　Kerberos（具体可参考<a href="https://tools.ietf.org/html/rfc1510" target="_blank" rel="external">RFC1510</a>）是一种网络<strong>身份验证</strong>的协议（注意它只包括验证环节，不负责授权，关于这两者后面会有介绍区分），用户只需输入一次身份验证信息，就可凭借此验证获得的票据授予票据（ticket-granting ticket）访问多个接入Kerberos的服务，即<a href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="external">SSO</a>（Single Sign On，单点登录）。</p>
<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul>
<li>Principal：安全个体，具有唯一命名的客户端或服务器。命名规则：主名称+实例+领域，如本文开头中的<code>sherlocky/admin@EXAMPLE.COM</code></li>
<li>Ticket：票据，一条包含客户端标识信息、会话密钥和时间戳的记录，客户端用它来向目标服务器认证自己</li>
<li>Session key：会话密钥，指两个安全个体之间使用的临时加密秘钥，其时效性取决于单点登录的会话时间长短</li>
<li>AS：认证服务器（Authentication Server），KDC的一部分。通常会维护一个包含安全个体及其秘钥的数据库，用于身份认证</li>
<li>SS：特定服务的提供端（Service Server）</li>
<li>TGS：许可证服务器（Ticket Granting Server），KDC的一部分，根据客户端传来的TGT发放访问对应服务的票据</li>
<li>TGT：票据授予票据（Ticket Granting Ticket），包含客户端ID、客户端网络地址、票据有效期以及<em>client/TGS</em>会话密钥</li>
<li>KDC：Key分发中心（key distribution center），是一个提供票据（tickets）和临时会话密钥（session keys）的网络服务。KDC服务作为客户端和服务器端信赖的第三方，为其提供初始票据（initial ticket）服务和票据授予票据（ticket-granting ticket）服务，前半部分有时被称为AS，后半部分有时则被称为TGS。</li>
</ul>
<p>　　关于概念的一点补充，博文<a href="http://www.360doc.com/content/15/0803/18/13047933_489282618.shtml" target="_blank" rel="external">Kerberos 服务的工作原理</a>中对于TGT和Ticket给出了巧妙的比喻：TGT类似于护照，Ticket则是签证，而访问特定的服务则好比出游某个国家。与护照一样，TGT可标识你的身份并允许你获得多个Ticket（签证），每个Ticket对应一个特定的服务，TGT和Ticket同样具有有效期，过期后就需要重新认证。</p>
<h3 id="2-认证过程"><a href="#2-认证过程" class="headerlink" title="2.认证过程"></a>2.认证过程</h3><p>　　Kerberos的认证过程可细分为三个阶段：初始验证、获取服务票据和服务验证。第一阶段主要是客户端向KDC中的AS发送用户信息，以请求TGT，然后到第二阶段，客户端拿着之前获得的TGT向KDC中的TGS请求访问某个服务的票据，最后阶段拿到票据（Ticket）后再到该服务的提供端验证身份，然后使用建立的加密通道与服务通信。</p>
<h4 id="2-1-初始验证"><a href="#2-1-初始验证" class="headerlink" title="2.1 初始验证"></a>2.1 初始验证</h4><p>　　此过程是客户端向AS请求获取TGT：</p>
<blockquote>
<ul>
<li>客户端向AS发送自身用户信息（如用户ID），该动作通常发生在用户初次登陆或使用kinit命令时</li>
<li>AS检查本地数据库是否存在该用户，若存在则返回如下两条信息：<ul>
<li>消息A：使用用户密钥加密的<em>Client/TGS</em>会话密钥，我们称之为SK1。其中用户密钥是通过对该用户在数据库中对应的密码hash生成的</li>
<li>消息B：使用TGS的密钥加密的TGT（包含客户端ID、客户端网络地址、票据有效期和SK1）</li>
</ul>
</li>
<li>当客户端收到消息A和B时，它会尝试用本地的用户密钥（由用户输入的密码或kerberos.keytab文件中的密码hash生成）对A进行解密，只有当本地用户密钥与AS中对应该用户的密钥匹配时才能解密成功。对A解密成功后，客户端就能拿到SK1，才能与TGS进行后续的会话，这里就相当于AS对客户端的一次验证，只有真正拥有正确用户密钥的客户端才能有机会与AS进行后续会话。而对于消息B，由于它是由TGS的密钥加密的，故无法对其解密，也看不到其中的内容。</li>
</ul>
</blockquote>
<h4 id="2-2-获取服务票据"><a href="#2-2-获取服务票据" class="headerlink" title="2.2 获取服务票据"></a>2.2 获取服务票据</h4><p>　　此过程则是客户端向TGS请求获取访问对应服务的票据：</p>
<blockquote>
<ul>
<li>当客户端要访问某个服务时，会向TGS发送如下两条消息：<ul>
<li>消息C：消息B的内容（即加密后的TGT）和服务ID</li>
<li>消息D：通过SK1加密的验证器（Authenticator，包括用户ID和时间戳）</li>
</ul>
</li>
<li><p>TGS收到消息C和D后，首先检查KDC数据库中是否存在所需服务，若存在则用自己的TGS密钥尝试对C中的消息B进行解密，这里也是客户端对TGS的反向认证，只有真正拥有正确密钥的TGS才能对B解密，解密成功后就能拿到其中的SK1，然后再用SK1解密消息D拿到包含用户ID和时间戳的Authenticator，通过比较分别来自C和D的用户ID，如果二者匹配，则向客户端返回如下两条消息：</p>
<ul>
<li>消息E：通过SK1加密的Client/SS会话密钥，该会话密钥是KDC新生成的随机密钥，用于将来客户端（Client）与服务端（SS）的通信加密，我们称之为SK2</li>
<li>消息F：使用服务的密钥加密的client-server票据（Ticket，包含用户ID、用户网络地址、票据有效期和SK2），之所以要用服务的密钥加密，是因为这个Ticket是给服务端看的，但又需要经过客户端传给服务端，且不能让客户端看到。那么就会有人问，为什么KDC不直接把消息E发送给服务端呢，这样岂不省事？问题就在于网络时延，若分开发送，消息E和F就不能确保同时到达服务端，考虑一个极端情况，KDC与服务之前的网络临时不通了，那么这段时间服务端就无法收到消息E，导致验证失败，而实际上该客户端是有访问权限的。通过公钥加密这种方式巧妙地回避了该问题</li>
</ul>
</li>
<li><p>客户端收到消息后，尝试用SK1解密消息E，得到Client/SS会话密钥SK2</p>
</li>
</ul>
</blockquote>
<h4 id="2-3-服务验证"><a href="#2-3-服务验证" class="headerlink" title="2.3 服务验证"></a>2.3 服务验证</h4><p>　　此过程是客户端与服务端相互验证，并通信</p>
<blockquote>
<ul>
<li><p>客户端向服务端发送如下两条消息：</p>
<ul>
<li><p>消息G：即上一步中的消息F——client-server票据</p>
</li>
<li><p>消息H：通过SK2加密的新的验证器（Authenticator，包含用户ID和时间戳）</p>
</li>
</ul>
</li>
<li><p>服务端收到消息后，尝试用自己的密钥解密消息G，这里实际上也是客户端对服务端的一次验证，只有真正拥有正确密钥的服务端才能正确解密，从而有机会拿到Ticket中的SK2，然后再用该SK2解密消息H，同TGS一样，对分别来自Ticket和Authenticator中的用户ID进行验证，如果匹配成功则返回一条确认消息：</p>
<ul>
<li>消息I：通过SK2加密的新时间戳</li>
</ul>
</li>
<li><p>客户端尝试用SK2解密消息I，得到新时间戳并验证其正确性，验证通过后，客户端与服务端就达到了相互信任，后续的通信都采用SK2加密，就好比建立了一条加密通道，二者即可享受服务与被服务的乐趣了</p>
</li>
</ul>
</blockquote>
<h3 id="3-前提（环境假设）"><a href="#3-前提（环境假设）" class="headerlink" title="3.前提（环境假设）"></a>3.前提（环境假设）</h3><ul>
<li>共享密钥：在协议工作前，客户端与KDC，KDC与服务端都确保有了各自的共享密钥。</li>
<li>防Dos攻击：Kerberos协议本身并没有解决Dos攻击（<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="external">Denial of service</a>，拒绝服务）防范问题，通常是由系统管理员和用户自己去定期探测并解决这样的攻击。</li>
<li>保障安全个体自身安全：参与到Kerberos协议中的安全个体必须确保其秘钥的安全性，一旦秘钥泄露或被攻击者暴力破解，那么攻击者就能随意地伪装安全个体，做一些不和谐的事情。</li>
<li>不循环利用Principal的唯一标识：访问控制的常用方式是通过访问控制列表（access control lists，ACLs）来对特定的安全个体进行授权。如果列表中有条记录对应的安全个体<em>A</em>早已被删除，而<em>A</em>的唯一标识却被后来新加的某个个体<em>B</em>再次利用，那么<em>B</em>就会继承之前<em>A</em>对应的权限，这是不安全的。避免这种风险的做法就是不复用Principal的唯一标识。</li>
<li>时钟同步：参与到协议中的主机必须有个时钟相互之间进行“松散同步”，松散度是可配置的。为什么需要同步各主机的时间呢？实际上从Kerberos的认证过程可以看到，任何人都可以向KDC请求任何服务的TGT，那攻击者就有可能中途截获正常用户的请求包，然后离线解密，就能合法地拿到TGT。为了防止这种重放攻击，票据（Ticket）会包含时间戳信息，即具有一定的有效期，因此如果主机的时钟与Kerberos服务器的时钟不同步，则认证会失败。在实践中，通常用网络时间协议（Network Time Protocol, NTP）软件来同步时钟。</li>
</ul>
<h3 id="4-局限性"><a href="#4-局限性" class="headerlink" title="4.局限性"></a>4.局限性</h3><ul>
<li>单点风险：过度依赖于KDC服务，Kerberos协议运转时需要KDC的持续响应，一旦KDC服务挂了，或者KDC数据库被攻破，那么Kerberos协议将无法运转</li>
<li>安全个体自身的安全：Kerberos协议之所以能运行在非安全网络之上，关键假设就是主机自身是安全的，一旦主机上的私钥泄露，攻击者将能轻易的伪装该个体实施攻击</li>
</ul>
<h2 id="三、Kerberos应用"><a href="#三、Kerberos应用" class="headerlink" title="三、Kerberos应用"></a>三、Kerberos应用</h2><h3 id="1-Hadoop安全机制"><a href="#1-Hadoop安全机制" class="headerlink" title="1.Hadoop安全机制"></a>1.Hadoop安全机制</h3><p>　　Apache Hadoop 最初设计时并没有考虑安全问题，它不对用户或服务进行验证，任何人都可以向集群提交代码并得到执行，使用Hadoop的组织只能把集群隔离到专有网络，确保只有经过授权的用户才能访问，但这也并不能解决Hadoop集群内部的安全问题。为了增强Hadoop的安全机制，从1.0.0版本以后，引入Kerberos认证机制，即用户跟服务通信以及各个服务之间通信均用Kerberos认证，在用户认证后任务执行、访问服务、读写数据等均采用特定服务发起访问token，让需求方凭借token访问相应服务和数据。下面以Yarn中提交MR任务为例：</p>
<blockquote>
<p>A、用户先向KDC请求TGT，做初始验证</p>
<p>B、用户通过TGT向KDC请求访问服务的Ticket</p>
<p>C、客户端通过ticket向服务认证自己，完成身份认证</p>
<p>D、完成身份认证后，客户端向服务请求若干token供后续任务执行时认证使用</p>
<p>F、客户端连同获取的token一并提交任务，后续任务执行使用token与服务进行认证</p>
</blockquote>
<h2 id="四、其他安全机制"><a href="#四、其他安全机制" class="headerlink" title="四、其他安全机制"></a>四、其他安全机制</h2><h3 id="1-OAuth认证"><a href="#1-OAuth认证" class="headerlink" title="1.OAuth认证"></a>1.OAuth认证</h3><p>　　OAuth（Open Authorization，开放授权）用于第三方授权服务，现常用的第三方账号登陆都是采用该机制。比如我用github账号登陆LeetCode官网，LeetCode并不需要知道我的github账号、密码，它只需要将登陆请求转给授权方（github），由它进行认证授权，然后把授权信息传回LeetCode实现登陆。</p>
<h3 id="2-LDAP"><a href="#2-LDAP" class="headerlink" title="2.LDAP"></a>2.LDAP</h3><p>　　LDAP（Lightweight Directory Access Protocol，轻量级目录访问协议）是一种用于访问目录服务的业界标准方法，LDAP目录以树状结构来存储数据，针对读取操作做了特定优化，比从专门为OLTP优化的关系数据库中读取数据快一个量级。LDAP中的安全模型主要通过身份认证、安全通道和访问控制来实现，它可以把整个目录、目录的子树、特定条目、条目属性集火符合某过滤条件的条目作为控制对象进行授权，也可以把特定用户、特定组或所有目录用户作为授权主体进行授权，也可以对特定位置（如IP或DNS名称）进行授权。</p>
<h3 id="3-SSL"><a href="#3-SSL" class="headerlink" title="3.SSL"></a>3.<a href="SSL/TLS协议运行机制的概述">SSL</a></h3><p>SSL（Secure Sockets Layer，安全套接层）是目前广泛应用的加密通信协议，其基本思路是采用公钥加密法，即客户端先向服务器端索要公钥，然后用公钥加密信息，服务端收到密文后用自己的私钥解密。它的安全机制包含如下三点：</p>
<blockquote>
<ul>
<li>连接的私密性：利用会话密钥通过对称加密算法（DES）对传输数据进行加密，并利用RSA对会话密钥本身加密</li>
<li>身份验证：基于数字证书利用数字签名方法进行身份验证，SSL服务器和客户端通过PKI（Public Key Infrastructure）提供的机制从CA获取证书</li>
<li>内容可靠：使用基于密钥的MAC（Message Authentication Code，消息验证码）验证消息的完整性，防窜改</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell编程 </tag>
            
            <tag> kerberos </tag>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>http://www.yangbing.club/2017/04/10/common-linux-commands/</url>
      <content type="html"><![CDATA[<p>  最近项目中有用到Shell脚本，难免会与一些以前没用到甚至没见过的Linux命令打交道，借此番机会也算是学习一哈，记录在此，以供日后参考。后续若再接触新的命令也会更新到此。</p>
<a id="more"></a>
<style> table th:first-of-type { width: 100px; } </style>

<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html#tee-invocation" target="_blank" rel="external">tee</a></h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">用途</td>
<td>重定向输出到多个文件或进程</td>
</tr>
<tr>
<td style="text-align:left">简介</td>
<td>该命令读取标准输入，并将内容同时输出到标准输出（屏幕）和多个文件中。</td>
</tr>
<tr>
<td style="text-align:left">应用场景</td>
<td>当我们重定向输出到文件中时，使用常规的“&gt;”符号无法直接从屏幕上看到原输出，使用tee就可在重定向文件的同时将内容输出到标准输出（屏幕）</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>tee [OPTION]…   [FILE]…<br>-a, 追加到给定的文件，没有此选项时默认是覆盖<br>-i, 忽略中断信号</td>
</tr>
<tr>
<td style="text-align:left">示例</td>
<td>ls &#124; tee &#124; out.txt<br>cat 1.txt &#124; tee -a out.txt</td>
</tr>
<tr>
<td style="text-align:left">注意</td>
<td>在使用管道线时，前一个命令的标准错误输出不会被tee读取。</td>
</tr>
</tbody>
</table>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation" target="_blank" rel="external">date</a></h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">简介</td>
<td>根据给定格式显示日期时间或设置系统日期时间</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>date [OPTION]… [+FORMAT]<br>date [-u&#124;–utc&#124;–universal][ MMDDhhmm[[CC]YY][.ss] ]<br><br>OPTION: -d -f -r -R -rfc-2822 -s -u –help<br>FORMAT: %% %a %A %b %B %c %C %d %D…</td>
</tr>
<tr>
<td style="text-align:left">示例</td>
<td>date -d now +%Y%m%d   用指定格式显示当前时间<br>date -r text.log   显示文件最后修改时间<br>date -s “2013-09-06 00:00:00”   设置系统时间</td>
</tr>
</tbody>
</table>
<h2 id="getopts-getopt"><a href="#getopts-getopt" class="headerlink" title="getopts/getopt"></a>getopts/getopt</h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">简介</td>
<td>获取并处理命令行参数</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>getopts option_string variable<br>第一个参数<strong>option_string</strong>是字符串，包括字符和”:”，每个字符都是一个有效的选项，若字符后带有”:”，表示这个字符有自己的参数。<br>getopts命令会读取命令行参数，当遇到连字符”-“，会判断”-“后的字符是否出现在option_string定义的选项中，若有匹配，则将其赋给第二个参数<strong>variable</strong>；否则将variable设为”?”。若选项有自己的参数，getopts会从命令行该选项后读取参数值：若该值存在，则将被赋给一个特殊变量<strong>OPTARG</strong>中；否则将在OPTARG中存放一个”?”，并在标准错误上显示一条消息。</td>
</tr>
<tr>
<td style="text-align:left">注意项</td>
<td>1.getopts是shell内置命令，不能处理长选项（如：–prefix=../），而getopt是C的库函数，可处理长选项。<br>2.当option_string以”:”开头时，表示区分invalid option错误和miss option argument，对于前者，variable会被设置为”?”，对于后者，variable会被设置为”:”（见示例）；当option_string不以”:”开头时，对于上述两种错误，variable都被设为”?”。</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">while getopts &apos;:hf:g:s:t:&apos; OPTION</div><div class="line">do</div><div class="line">	case $OPTION</div><div class="line">	in</div><div class="line">		h) usage;;			#h后面无&quot;:&quot;，表示不带参数，usage是打印用法详情</div><div class="line">		f) FILENAME=$OPTARG;;</div><div class="line">		g) GROUP=$OPTARG;;</div><div class="line">		s) START=$OPTARG;;</div><div class="line">		t) TYPE=$OPTARG;;</div><div class="line">		:) echo &quot;选项\&quot;-$OPTARG\&quot; 后面缺少对应参数，将使用默认值;;</div><div class="line">		\?)echo &quot;错误的选项 -$OPTARG,将退出&quot;;;</div><div class="line">	esac</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/wc-invocation.html#wc-invocation" target="_blank" rel="external">wc</a></h2><table>
<thead>
<tr>
<th>要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>简介</td>
<td>word count，统计给定文件（可指定多个）或标准输入（没给定文件时）中字节数、字符数、词数（以空白符分割的词数）以及行数。</td>
</tr>
<tr>
<td>用法</td>
<td><strong>wc</strong> [<em>option</em>]… [<em>file</em>]…<br>option有如下选项：<br>-c, –bytes　　　　打印字节数<br>-m, –chars 　　　　打印字符数<br>-l, –lines　　　　打印行数<br>-L, –max-line-length　　　　打印最长行的长度<br>-w, –words　　　　打印词数，一个词被定义为以空白符分割的字符串<br>    –help　　　　展示帮助信息</td>
</tr>
<tr>
<td>注意</td>
<td>输出：wc会为每个文件打印一行计数，如果文件是作为参数，则会为每个文件打印两列：统计数 文件名，并在最后追加一行打印总两列：计数 total。<br>wc通常与管道线结合使用，直接打印计数</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wc -l readme.txt version.txt        #统计指定的两个文件的行数，输出如下</div><div class="line">27	readme.txt</div><div class="line"> 1	version.txt</div><div class="line">28	total</div><div class="line">cat readme.txt | wc -c              #结合管道，只输出统计数，如下</div><div class="line">898</div><div class="line">ls -l | wc -l                       #统计当前目录下的文件数</div><div class="line">8</div></pre></td></tr></table></figure>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html#cp-invocation" target="_blank" rel="external">cp</a></h2><table>
<thead>
<tr>
<th>要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>简介</td>
<td>Copy files and directories，复制一个或多个文件或目录到指定的文件或目录</td>
</tr>
<tr>
<td>用法</td>
<td>cp [<em>option</em>]… <em>source</em>… <em>dest</em><br>option有如下选项：<br>-f,–force　　　强行复制文件或目录，不论目标文件或目录是否已存在<br>-i,–interactive　　　覆盖既有文件之前先询问用户<br>-r/R,–recursive　　　递归地复制目录，该选项<strong>只适用于目录</strong>，不能用于复制文件或符号链接<br>-b,–backup[=<em>method</em>]　　　为即将删除或覆盖的目标文件进行备份<br>-s,–symbolic-link　　　对源文件建立符号连接，而非复制文件<br>-S,–suffix=<em>suffix</em>　　　备份文件时，用指定后缀”<em>suffix</em>“代替文件的默认后缀<br>-v,–verbose　　　复制每个文件前，打印文件名<br><br>source(源文件)：指定源文件列表。默认情况下，cp不能复制目录，若要复制目录，必须使用-r选项<br>dest(目标文件或目录)：当source为多个文件时，dest必须是目录</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp file1 file2                       #将file1复制一份，并命名为file2</div><div class="line">cp -f file1 dir2/                    #将file1强行复制到目录dir2下</div><div class="line">cp -fr dir1 dir2/                    #递归地复制目录dir1到目录dir2下</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux命令 </tag>
            
            <tag> Shell编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring事务管理]]></title>
      <url>http://www.yangbing.club/2017/03/22/spring-transaction-management/</url>
      <content type="html"><![CDATA[<p>  对大多数Java开发者来说，Spring事务管理是Spring应用中最常用的功能，使用也比较简单。本文主要从三个方面（基本概述、基于源码的原理分析以及需要注意的细节）来逐步介绍Spring事务管理的相关知识点及原理，作为Spring事务管理的学习总结。</p>
<a id="more"></a>
<h1 id="Spring事务管理概述"><a href="#Spring事务管理概述" class="headerlink" title="Spring事务管理概述"></a>Spring事务管理概述</h1><h2 id="一、几个重要概念"><a href="#一、几个重要概念" class="headerlink" title="一、几个重要概念"></a>一、几个重要概念</h2><h3 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1.事务隔离级别"></a>1.事务隔离级别</h3><p>  ANSI/ISO SQL92标准定义了4个<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Isolation.html" target="_blank" rel="external">隔离级别</a>：<strong>READ UNCOMMITED</strong>、<strong>READ COMMITED</strong>、<strong>REPEATABLE READ</strong>和<strong>SERIALIZABLE</strong>，隔离程度由弱到强。不同的事务隔离级别能够解决数据并发问题的能力不同，它与数据库并发性是对立的，两者此消彼长。</p>
<h3 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2.事务传播行为"></a>2.事务传播行为</h3><p>  事务传播主要是为了描述两个服务接口方法嵌套调用时，被调用者在调用者有无事务时所采取的事务行为。Spring框架在TransactionDefinition接口中固定了7种事务传播行为：<strong>PROPAGATION_REQUIRED</strong>、 <strong>PROPAGATION_SUPPORTS</strong>、 <strong>PROPAGATION_MANDATORY</strong>、     <strong>PROPAGATION_REQUIRES_NEW</strong>、 <strong>PROPAGATION_NOT_SUPPORTED</strong>、 <strong>PROPAGATION_NEVER</strong>、  <strong>PROPAGATION_NESTED</strong>。前面的6种是从EJB中引入的，而<strong>PROPAGATION_NESTED</strong>是Spring特有的。具体可参见<a href="http://pjoc.pub/shen-ru-qian-chu-shi-wu-4-springshi-wu-de-chuan-bo-xing-wei/" target="_blank" rel="external">深入浅出事务(4):Spring事务的传播行为</a>，该文结合具体代码示例，通俗易懂。</p>
<h3 id="3-事务同步管理器"><a href="#3-事务同步管理器" class="headerlink" title="3.事务同步管理器"></a>3.事务同步管理器</h3><p>  <strong>TransactionSynchronizationManager</strong>——事务管理的基石，主要是为了解决事务管理在多线程环境下资源（如Connection、Session等）的并发访问问题：使用ThreadLocal为不同事务线程维护独立的资源副本，以及事务配置属性和运行状态信息，使各个事务线程互不影响。</p>
<h3 id="4-事务管理SPI"><a href="#4-事务管理SPI" class="headerlink" title="4.事务管理SPI"></a>4.事务管理SPI</h3><p>  <a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">SPI</a>（Service Provider Interface）是一个框架开放给第三方的可扩展服务接口，供其具体实现，以支持框架的扩展性和插件式组件。Spring事务管理SPI主要包括3个接口：<strong>PlatformTransactionManager</strong>（进行事务的创建、提交或回滚）、<strong>TransactionDefinition</strong>（定义事务属性，如隔离级别）和<strong>TransactionStatus</strong>（事务运行时状态，如是否已完成）。这三者通过PlatformTransactionManager的如下接口进行关联：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据事务定义创建事务，并由TransactionStatus表示它</span></div><div class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span></span>;</div><div class="line"><span class="comment">// 根据事务运行时状态提交或回滚事务</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><p>  三种方式：编程、XML配置和注解。第一方式对应用代码侵入性较大，现已较少使用。后面两种则都属于声明式事务管理的方式，两者的共同点是都提供事务管理信息的元数据，只不过方式不同。前者对代码的侵入性最小，也最为常用，后者则属于较为折衷的方案，有一点侵入性，但相对也较少了配置，各有优劣，<a href="http://jinnianshilongnian.iteye.com/blog/1879910" target="_blank" rel="external">依场景需求而定</a>。<strong>声明式事务管理</strong>是Spring的一大亮点，利用AOP技术将事务管理作为切面动态织入到目标业务方法中，让事务管理简单易行。</p>
<p>  而不管是使用哪种方式，<strong>数据源</strong>、<strong>事务管理器</strong>都是必须的，一般通过XML的Bean配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destory-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.driverClass&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.jdbcUrl&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.maxPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.minPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;initialPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 指定事务管理器标识，可被@Transactional注解引用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"txManagerA"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="1-编程式事务管理"><a href="#1-编程式事务管理" class="headerlink" title="1.编程式事务管理"></a>1.编程式事务管理</h3><p>  采用与DAO模板类一样的开闭思想，Spring提供了线程安全的<strong>TransactionTemplate</strong>模板类来处理不变的事务管理逻辑，将变化的部分抽象为回调接口<strong>TransactionCallback</strong>供用户自定义数据访问逻辑。使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> DaoA daoA;</div><div class="line">	<span class="meta">@autowried</span></div><div class="line">	<span class="keyword">private</span> TransactionTemplate template;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</div><div class="line">		template.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</div><div class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</div><div class="line">				daoA.addElement(ele);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  TransactionTemplate的配置信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"txManager"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"isolationLevelName"</span> <span class="attr">value</span>=<span class="string">"ISOLATION_DEFAULT"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>  当然，用户也可以不使用TransactionTemplate，而是直接基于原始的<a href="#4-事务管理SPI">Spring事务管理SPI</a>进行编程式事务管理，只不过这种方式对代码侵入性最大，不推荐使用，这里也就不多做介绍了。</p>
<h3 id="2-基于XML配置的事务管理"><a href="#2-基于XML配置的事务管理" class="headerlink" title="2.基于XML配置的事务管理"></a>2.基于XML配置的事务管理</h3><p>  Spring早期版本，是通过<strong>TransactionProxyFactoryBean</strong>代理类实施声明式事务配置，由于这种方式的种种弊端，后来引入AOP切面描述语言后，提出一种更简洁的基于Schema的配置方式：<strong>tx/aop命名空间</strong>，使声明式事务配置更简洁便利。</p>
<h4 id="2-1基于Bean的配置"><a href="#2-1基于Bean的配置" class="headerlink" title="2.1基于Bean的配置"></a>2.1基于Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceATarget"</span> <span class="attr">class</span>=<span class="string">"org.sherlocky.book.spring3x.service.ServiceAImpl"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceA"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span></span></div><div class="line">      <span class="attr">p:transactionManager-ref</span>=<span class="string">"txManager"</span></div><div class="line">      <span class="attr">p:target-ref</span>=<span class="string">"serviceATarget"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"get*"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="2-1基于Schema的配置（常用）"><a href="#2-1基于Schema的配置（常用）" class="headerlink" title="2.1基于Schema的配置（常用）"></a>2.1基于Schema的配置（常用）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.sherlocky.book.spring3x.service.*ServiceA.*(..))"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-3基于注解的事务管理"><a href="#2-3基于注解的事务管理" class="headerlink" title="2.3基于注解的事务管理"></a>2.3基于注解的事务管理</h4><p>  通过<strong>@Transactional</strong>对需要事务增强的Bean接口、实现类或方法进行标注，在容器中配置<strong><tx:annotation-driven></tx:annotation-driven></strong>以启用基于注解的声明式事务。注解所提供的事务属性信息与XML配置中的事务信息基本一致，只不过是另一种形式的元数据而已。使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(<span class="string">"txManagerA"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> DaoA daoA;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring事务管理源码分析-spring3-1-0"><a href="#Spring事务管理源码分析-spring3-1-0" class="headerlink" title="Spring事务管理源码分析-(spring3.1.0)"></a>Spring事务管理源码分析-(spring3.1.0)</h1><p>  源码分析一定要有目的性，至少有一条清晰的主线，比如要搞清楚框架的某一个功能点背后的代码组织，前因后果，而不是一头扎进源码里，无的放矢。本文就从Spring事务管理的三种使用方式入手，逐个分析Spring在背后都为我们做了些什么。</p>
<h2 id="一、编程式"><a href="#一、编程式" class="headerlink" title="一、编程式"></a>一、编程式</h2><h3 id="1-TransactionTemplate"><a href="#1-TransactionTemplate" class="headerlink" title="1.TransactionTemplate"></a>1.TransactionTemplate</h3><p>  TransactionTemplate是编程式事务管理的入口，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTemplate</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">TransactionOperations</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line">	<span class="keyword">private</span> PlatformTransactionManager transactionManager;</div><div class="line">  	...</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</div><div class="line">			<span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager) <span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);【<span class="number">1</span>】</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);【<span class="number">2</span>】</div><div class="line">			T result;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				result = action.doInTransaction(status);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (RuntimeException ex) &#123;【<span class="number">3</span>】</div><div class="line">				<span class="comment">// Transactional code threw application exception -&gt; rollback</span></div><div class="line">				rollbackOnException(status, ex);</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Error err) &#123;【<span class="number">4</span>】</div><div class="line">				<span class="comment">// Transactional code threw error -&gt; rollback</span></div><div class="line">				rollbackOnException(status, err);</div><div class="line">				<span class="keyword">throw</span> err;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;【<span class="number">5</span>】</div><div class="line">				<span class="comment">// Transactional code threw unexpected exception -&gt; rollback</span></div><div class="line">				rollbackOnException(status, ex);</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.transactionManager.commit(status);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1整体概述"><a href="#1-1整体概述" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionTemplate提供了唯一的编程入口execute，它接受用于封装业务逻辑的TransactionCallback接口的实例，返回用户自定义的事务操作结果T。具体逻辑：先是判断transactionManager是否是接口CallbackPreferringPlatformTransactionManager的实例，若是则直接委托给该接口的execute方法进行事务管理；否则交给它的核心成员PlatformTransactionManager进行事务的创建、提交或回滚操作。</p>
<p>  CallbackPreferringPlatformTransactionManger接口扩展自PlatformTransactionManger，根据以下的官方源码注释可知，该接口相当于是把事务的创建、提交和回滚操作都封装起来了，用户只需要传入TransactionCallback接口实例即可，而不是像使用PlatformTransactionManger接口那样，还需要用户自己显示调用getTransaction、rollback或commit进行事务管理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Implementors of this interface automatically express a preference for</span></div><div class="line"><span class="comment">// callbacks over programmatic getTransaction, commit and rollback calls.</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CallbackPreferringPlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title">PlatformTransactionManager</span></span>&#123;...&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2具体剖析"><a href="#1-2具体剖析" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="DefaultTransactionDefinition"><a href="#DefaultTransactionDefinition" class="headerlink" title="DefaultTransactionDefinition"></a>DefaultTransactionDefinition</h5><p>  可以看到transactionTemplate直接扩展自DefaultTransactionDefinition，让自身具有默认事务定义功能，【1】和【2】处将<strong>this</strong>作为execute或getTransaction的实参传入，说明该事务管理是采用默认的事务配置，可以看下DefaultTransactionDefinition中定义的默认配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> propagationBehavior = PROPAGATION_REQUIRED; <span class="comment">//常用选择：当前没有事务，则新建；否则加入到该事务中</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> isolationLevel = ISOLATION_DEFAULT;         <span class="comment">//使用数据库默认的隔离级别</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = TIMEOUT_DEFAULT;                  <span class="comment">//-1，使用数据库的超时设置</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> readOnly = <span class="keyword">false</span>;                       <span class="comment">//非只读事务</span></div></pre></td></tr></table></figure>
<h5 id="TransactionOperations和InitializingBean"><a href="#TransactionOperations和InitializingBean" class="headerlink" title="TransactionOperations和InitializingBean"></a>TransactionOperations和InitializingBean</h5><p>而TransactionOperations和InitializingBean接口分别定义了如下单个方法。InitializingBean是Spring在初始化所管理的Bean时常用的接口，以确保某些属性被正确的设置或做一些初始化时的后处理操作，可参考<a href="http://blog.csdn.net/maclaren001/article/details/37039749" target="_blank" rel="external">InitializingBean的作用</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span></span>;   <span class="comment">//TransactionTemplate的编程接口</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span></span>;                      <span class="comment">//Bean初始化时调用：在成员变量装配之后</span></div></pre></td></tr></table></figure>
<p>TransactionTemplate实现InitializingBean接口，主要是确保其核心成员transactionManager是否已初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'transactionManager' is required"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  从【3】【4】【5】可看出，基于TransactionTemplate的事务管理，在发生RuntimeException、Error或Exception时都会回滚，正常时才提交事务。</p>
<h3 id="2-PlatformTransactionManager"><a href="#2-PlatformTransactionManager" class="headerlink" title="2. PlatformTransactionManager"></a>2. PlatformTransactionManager</h3><p>  该接口在Spring事务管理中扮演着重要角色。看下getTransaction的源码注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Return a currently active transaction or create a new one, according to</span></div><div class="line"><span class="comment">// the specified propagation behavior.</span></div></pre></td></tr></table></figure>
<p>该方法的主要作用就是根据TransactionDefinition返回当前有效事务或新建事务，其中就包含了<a href="#2-事务传播行为">事务传播行为</a>的控制逻辑。其<strong>唯一实现</strong>就是该接口对应的抽象类AbstractPlatformTransactionManager，这是典型的接口-&gt;抽象类-&gt;具体实现类三层结构，以<strong>提高代码复用性</strong>。其中抽象类是负责实现一些共有逻辑，而具体子类则是各自实现差异化功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明为final，确保不能再被子类重写</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</div><div class="line">		Object transaction = doGetTransaction();</div><div class="line">        ...</div><div class="line">		<span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;【<span class="number">1</span>】</div><div class="line">			<span class="keyword">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</div><div class="line">		&#125;</div><div class="line">        ...</div><div class="line">		<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</div><div class="line">					<span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</div><div class="line">				definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</div><div class="line">		    definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">			SuspendedResourcesHolder suspendedResources = suspend(<span class="keyword">null</span>);【<span class="number">2</span>】</div><div class="line">			...</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">				resume(<span class="keyword">null</span>, suspendedResources);【<span class="number">3</span>】</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">				resume(<span class="keyword">null</span>, suspendedResources);</div><div class="line">				<span class="keyword">throw</span> err;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</div><div class="line">			<span class="keyword">return</span> prepareTransactionStatus(definition, <span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>可以看到它会根据【1】处的isExistingTransaction方法判断当前是否有事务而分别作出不同的处理，包括挂起和恢复当前事务等，有兴趣的童鞋可以深入【2】处的supend和【3】处的resume方法，会发现对事务的挂起和恢复操作实际是委托于<strong>TransactionSynchronizationManager</strong>来做的，而该类在前面也提过到，是Spring管理事务资源的，这几个重要接口和类的关系渐渐清晰了，由于篇幅有限，后面打算单独另起一篇细讲。</p>
<h2 id="2-声明式"><a href="#2-声明式" class="headerlink" title="2.声明式"></a>2.声明式</h2><p>  基于XML和注解的方式都是属于声明式事务管理，只是提供元数据的形式不用，索性就一起讲了。声明式事务的核心实现就是利用AOP技术，将事务逻辑作为环绕增强MethodInterceptor动态织入目标业务方法中。其中的核心类为TransactionInterceptor。从以下代码注释可知，TransactionInterceptor是专用于声明式事务管理的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></div><div class="line"><span class="comment">// management using the common Spring transaction infrastructure &#123;PlatformTransactionManager&#125;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<h3 id="1-TransactionInterceptor"><a href="#1-TransactionInterceptor" class="headerlink" title="1.TransactionInterceptor"></a>1.TransactionInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></div><div class="line"><span class="comment">// management using the common Spring transaction infrastructure</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>从上述注释中可知该类是专用于声明式事务管理的，它的核心方法如下invoke：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// If the transaction attribute is null, the method is non-transactional.</span></div><div class="line">		<span class="keyword">final</span> TransactionAttribute txAttr =</div><div class="line">				getTransactionAttributeSource().getTransactionAttribute(invocation.getMethod(), targetClass);【<span class="number">1</span>】</div><div class="line">		<span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);【<span class="number">2</span>】</div><div class="line">		<span class="keyword">final</span> String joinpointIdentification = methodIdentification(invocation.getMethod(), targetClass);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</div><div class="line">			<span class="comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></div><div class="line">			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);【<span class="number">3</span>】</div><div class="line">			Object retVal = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></div><div class="line">				<span class="comment">// This will normally result in a target object being invoked.</span></div><div class="line">				retVal = invocation.proceed();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				<span class="comment">// target invocation exception</span></div><div class="line">				completeTransactionAfterThrowing(txInfo, ex);【<span class="number">4</span>】</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				cleanupTransactionInfo(txInfo);</div><div class="line">			&#125;</div><div class="line">			commitTransactionAfterReturning(txInfo);【<span class="number">5</span>】</div><div class="line">			<span class="keyword">return</span> retVal;</div><div class="line">		&#125;</div><div class="line">  		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,</div><div class="line">						<span class="keyword">new</span> TransactionCallback&lt;Object&gt;() &#123;</div><div class="line">							<span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</div><div class="line">								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</div><div class="line">								<span class="keyword">try</span> &#123;</div><div class="line">									<span class="keyword">return</span> invocation.proceed();</div><div class="line">								&#125;</div><div class="line">							    ...</div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line">                ...</div><div class="line">			&#125;</div><div class="line">			...</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1整体概述-1"><a href="#1-1整体概述-1" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionInterceptor实现了MethodInterceptor接口，将事务管理的逻辑封装在环绕增强的实现中，而目标业务代码则抽象为MethodInvocation（该接口扩展自Joinpoint，故实际是AOP中的连接点），使得事务管理代码与业务逻辑代码完全分离，可以对任意目标类进行无侵入性的事务织入。具体逻辑：先根据MethodInvocation获取事务属性TransactionAttribute，根据TransactionAttribute得到对应的PlatformTransactionManager，再根据其是否是CallbackPreferringPlatformTransactionManager的实例分别做不同的处理，整体上跟<a href="#1-TransactionTemplate">TransactionTemplate</a>中大相径庭，后面主要是介绍几点不同的地方。</p>
<h4 id="1-2具体剖析-1"><a href="#1-2具体剖析-1" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h5><p>  MethodInterceptor是AOP中的环绕增强接口，同一个连接点可以有多个增强，而TransactionInterceptor扩展自该接口，说明事务管理只是众多横切逻辑中的一种，还有很多其他的，比如像日志记录、性能监控等，对于AOP而言并无区别，它会按照增强的顺序统一处理。关于AOP，后期会单独一篇详细介绍。</p>
<h5 id="TransactionAttribute和TransactionAttributeSource"><a href="#TransactionAttribute和TransactionAttributeSource" class="headerlink" title="TransactionAttribute和TransactionAttributeSource"></a>TransactionAttribute和TransactionAttributeSource</h5><p>  在代码【1】处，委托给TransactionAttributeSource根据MethodInvocation获取对应的事务属性TransactionAttribute，先来看下TransactionAttribute：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttribute</span> <span class="keyword">extends</span> <span class="title">TransactionDefinition</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a qualifier value associated with this transaction attribute.</div><div class="line">	 * &lt;p&gt;This may be used for choosing a corresponding transaction manager</div><div class="line">	 * to process this specific transaction.</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">getQualifier</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Should we roll back on the given exception?</div><div class="line">	 * <span class="doctag">@param</span> ex the exception to evaluate</div><div class="line">	 * <span class="doctag">@return</span> whether to perform a rollback or not</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span></span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是在TransactionDefinition的基础上增加了两个可定制属性，使用过XML配置和注解方式的童鞋应该都对qualifier和rollback-for再熟悉不过了，那两个新增属性就是为了支持这两个配置项的。再来看下TransactionAttributeSource：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface used by TransactionInterceptor. Implementations know</div><div class="line"> * how to source transaction attributes, whether from configuration,</div><div class="line"> * metadata attributes at source level, or anywhere else.</div><div class="line"> * <span class="doctag">@see</span> TransactionInterceptor#setTransactionAttributeSource</div><div class="line"> * <span class="doctag">@see</span> TransactionProxyFactoryBean#setTransactionAttributeSource</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttributeSource</span> </span>&#123;</div><div class="line">	<span class="function">TransactionAttribute <span class="title">getTransactionAttribute</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之所以有这个接口，是因为Spring提供了XML配置、注解等不同的事务元数据形式，即事务属性的来源多样，该接口正是将事务配置的来源进行抽象，不同的来源有对应不同的实现类，接口单一职责，巧妙精简的设计！类图如下，AnnotationTransactionAttributeSource是注解相关，而NameMatchTransactionAttributeSource、MatchAlwaysTransactionAttributeSource等是XML配置相关。</p>
<p><img src="/2017/03/22/spring-transaction-management/TransactionAttribute.png" alt="TransactionAttribute类图"></p>
<h5 id="TransactionAspectSupport"><a href="#TransactionAspectSupport" class="headerlink" title="TransactionAspectSupport"></a>TransactionAspectSupport</h5><p>该抽象父类是事务切面的基本处理类，实现了一些共有方法，如代码【2】处determineTransactionManager(..)根据TransactionAttribute得到对应的PlatformTransactionManager，以及【3】处createTransactionIfNecessary创建事务，【4】处completeTransactionAfterThrowing回滚事务，【5】处commitTransactionAfterReturning提交事务等基本操作，底层同样是委托PlatformTransactionManager进行处理的。这里主要看下事务的回滚操作，跟TransactionTemplate是有区别的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completeTransactionAfterThrowing</span><span class="params">(TransactionInfo txInfo, Throwable ex)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (txInfo != <span class="keyword">null</span> &amp;&amp; txInfo.hasTransaction()) &#123;</div><div class="line">			...</div><div class="line">			<span class="keyword">if</span> (txInfo.transactionAttribute.rollbackOn(ex)) &#123;【<span class="number">1</span>】</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (TransactionSystemException ex2) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</div><div class="line">					ex2.initApplicationException(ex);</div><div class="line">					<span class="keyword">throw</span> ex2;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (RuntimeException ex2) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</div><div class="line">					<span class="keyword">throw</span> ex2;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback error"</span>, ex);</div><div class="line">					<span class="keyword">throw</span> err;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">              	<span class="keyword">try</span> &#123;</div><div class="line">					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</div><div class="line">				&#125;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>从【1】处的transactionAttribute.rollbackon(ex)可看出，事务属性中的rollbackOn是在这里生效的，在发生指定异常时选择回滚或提交，是用户可配置的，而不像TransactionTemplate是固定的全部回滚。</p>
<h3 id="2-TransactionProxyFactoryBean"><a href="#2-TransactionProxyFactoryBean" class="headerlink" title="2.TransactionProxyFactoryBean"></a>2.TransactionProxyFactoryBean</h3><p>该类是早期<a href="#2-1基于Bean的配置">基于Bean的XML配置方式</a>实现声明式事务的核心类，之所以放在后面讲，是因为该方式已不被推荐使用，先来看下定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Proxy factory bean for simplified declarative transaction handling.</div><div class="line"> * This is a convenient alternative to a standard AOP</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125;</div><div class="line"> * with a separate &#123;<span class="doctag">@link</span> TransactionInterceptor&#125; definition.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;strong&gt;HISTORICAL <span class="doctag">NOTE:</span>&lt;/strong&gt; This class was originally designed to cover the</div><div class="line"> * typical case of declarative transaction demarcation: namely, wrapping a singleton</div><div class="line"> * target object with a transactional proxy, proxying all the interfaces that the target</div><div class="line"> * implements. However, in Spring versions 2.0 and beyond, the functionality provided here</div><div class="line"> * is superseded by the more convenient &#123;<span class="doctag">@code</span> tx:&#125; XML namespace. See the &lt;a</div><div class="line"> * href="http://bit.ly/qUwvwz"&gt;declarative transaction management&lt;/a&gt; section of the</div><div class="line"> * Spring reference documentation to understand the modern options for managing</div><div class="line"> * transactions in Spring applications.</div><div class="line"> * ...</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractSingletonProxyFactoryBean</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> TransactionInterceptor transactionInterceptor = <span class="keyword">new</span> TransactionInterceptor();</div><div class="line">	<span class="keyword">private</span> Pointcut pointcut;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createMainInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.transactionInterceptor.afterPropertiesSet();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.pointcut != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(<span class="keyword">this</span>.pointcut, <span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Rely on default pointcut.</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TransactionAttributeSourceAdvisor(<span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码的声明已经相当清晰，大致说明了该类的来龙去脉，忍不住直接贴上来了，感兴趣可自行阅读。这里主要是看下其实现思路：事务处理逻辑是委托给其成员TransactionInterceptor，而将事务逻辑织入目标类的工作则交由AbstractSingletonProxyFactoryBean来处理。FactoryBean是Spring中广泛使用的用来定制一些较复杂Bean的实例化逻辑，因此从类名上就可看出，AbstractSingletonProxyFactoryBean的主要工作则是实例化并返回一个单例的Proxy对象。有了Proxy对象，织入的工作就轻而易举了，此时TransactionInterceptor只是Proxy的众多Advisor中的一个，最后由Proxy创建拥有了事务增强的代理对象即可。</p>
<p>  以下是AbstractSingletonProxyFactoryBean中Proxy的实例化过程，全部在afterPropertiesSet中完成。其中的createMainInterceptor()是在其子类TransactionProxyFactoryBean中实现的，对应事务增强逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSingletonProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">ProxyConfig</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.target == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'target' is required"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.target <span class="keyword">instanceof</span> String) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'target' needs to be a bean reference, not a bean name as value"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.proxyClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.proxyClassLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();【<span class="number">1</span>】</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.preInterceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.preInterceptors) &#123;</div><div class="line">				proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Add the main interceptor (typically an Advisor).</span></div><div class="line">		proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(createMainInterceptor()));</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.postInterceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.postInterceptors) &#123;</div><div class="line">				proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		proxyFactory.copyFrom(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		TargetSource targetSource = createTargetSource(<span class="keyword">this</span>.target);</div><div class="line">		proxyFactory.setTargetSource(targetSource);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.proxyInterfaces != <span class="keyword">null</span>) &#123;</div><div class="line">			proxyFactory.setInterfaces(<span class="keyword">this</span>.proxyInterfaces);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!isProxyTargetClass()) &#123;</div><div class="line">			<span class="comment">// Rely on AOP infrastructure to tell us what interfaces to proxy.</span></div><div class="line">			proxyFactory.setInterfaces(</div><div class="line">					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), <span class="keyword">this</span>.proxyClassLoader));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.proxy = proxyFactory.getProxy(<span class="keyword">this</span>.proxyClassLoader);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码【1】处可以看到，ProxyFactory是创建Proxy对象的关键类，感兴趣的童鞋可以跟进ProxyFactory的代码，可发现最终创建Proxy对象的是DefaultAopProxyFactory，细节如下：根据config配置，选择创建我们所熟知的两种AopProxy：JDK的JdkDynamicAopProxy和Cglib的Cglib2AopProxy。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">  	...</div><div class="line">	<span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</div><div class="line">			Class targetClass = config.getTargetClass();</div><div class="line">			<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</div><div class="line">						<span class="string">"Either an interface or a target is required for proxy creation."</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (targetClass.isInterface()) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!cglibAvailable) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</div><div class="line">						<span class="string">"Cannot proxy target class because CGLIB2 is not available. "</span> +</div><div class="line">						<span class="string">"Add CGLIB to the class path or specify proxy interfaces."</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> CglibProxyFactory.createCglibProxy(config);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h1><h2 id="一、PROPAGATION-TESTED（嵌套事务）"><a href="#一、PROPAGATION-TESTED（嵌套事务）" class="headerlink" title="一、PROPAGATION_TESTED（嵌套事务）"></a>一、PROPAGATION_TESTED（嵌套事务）</h2><p>  当使用PROPAGATION_NESTED时，<strong>底层的数据源必须基于JDBC3.0</strong>。因为Spring所支持的嵌套事务，是基于事务保存点实现的（<strong>JTA除外</strong>），而保存点机制是从JDBC3.0才开始出现的。直接看AbstractPlatformTransactionManager中的处理代码。对于通常的嵌套事务，会在当前所处父事务中创建保存点，然后进行子事务处理；对于JTA事务环境，则是采用嵌套的begin和commit/rollback调用来处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(</span></span></div><div class="line">		TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</div><div class="line">		<span class="keyword">throws</span> TransactionException &#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">		<span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(</div><div class="line">					<span class="string">"Transaction manager does not allow nested transactions by default - "</span> +</div><div class="line">					<span class="string">"specify 'nestedTransactionAllowed' property with value 'true'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</div><div class="line">			<span class="comment">// Create savepoint within existing Spring-managed transaction,</span></div><div class="line">			<span class="comment">// through the SavepointManager API implemented by TransactionStatus.</span></div><div class="line">			<span class="comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></div><div class="line">			DefaultTransactionStatus status =</div><div class="line">					prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			status.createAndHoldSavepoint();</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Nested transaction through nested begin and commit/rollback calls.</span></div><div class="line">			<span class="comment">// Usually only for JTA: Spring synchronization might get activated here</span></div><div class="line">			<span class="comment">// in case of a pre-existing JTA transaction.</span></div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">			DefaultTransactionStatus status = newTransactionStatus(</div><div class="line">					definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			doBegin(transaction, definition);</div><div class="line">			prepareSynchronization(status, definition);</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">     	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、获取数据连接资源"><a href="#二、获取数据连接资源" class="headerlink" title="二、获取数据连接资源"></a>二、获取数据连接资源</h2><p>  当脱离模板类，直接操作底层持久技术的原生API时，就需要通过Spring提供的资源工具类获取线程绑定的资源，而不应该直接从DataSource或SessionFactory中获取，否则容易造成<a href="https://my.oschina.net/jiangtao1314/blog/38993" target="_blank" rel="external">数据连接泄露</a>的问题。Spring为不同的持久化技术提供了一套从TransactionSynchronizationManager中获取对应线程绑定资源的工具类：DataSourceUtils（Spring JDBC或iBatis）、SessionFactoryUtils（Hibernate 3.0）等。</p>
<h2 id="三、如何标注-Transactional注解"><a href="#三、如何标注-Transactional注解" class="headerlink" title="三、如何标注@Transactional注解"></a>三、如何标注@Transactional注解</h2><p>  虽然@Transactional注解可被应用于接口、接口方法、类及类的public方法，但建议在具体实现类上使用@Transactional注解，因为<strong>接口上的注解不能被继承</strong>，这样会有隐患（关于注解的继承，可参考<a href="http://elf8848.iteye.com/blog/1621392" target="_blank" rel="external">这里</a>）。当事务配置按如下方式，使用的是子类代理（CGLib）而非接口代理（JDK）时，对应目标类不会添加事务增强！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码 </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
