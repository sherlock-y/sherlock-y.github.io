<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[从kinit到kerberos安全机制]]></title>
      <url>http://www.yangbing.club/2017/06/04/from-kinit-to-kerberos-security-mechanism/</url>
      <content type="html"><![CDATA[<p>　　最近老在项目的shell脚本中看到kinit这个东西，完整的命令是</p>
<p>　　 <code>kinit -k -t ./conf/kerberos.keytab sherlocky/admin@EXAMPLE.COM</code></p>
<p>　　查阅一番资料后了解到，之所以有这个命令，是由于该shell脚本接下来会访问Hadoop集群，从上面拉取文件做一些处理任务，并将结果存到Hadoop集群上，那么该命令的作用就是进行身份验证（Authentication），确保Hadoop集群资源的安全。这里就牵扯到kerberos协议，本文接下来将对此一一阐述。</p>
<a id="more"></a>
<h2 id="一、kinit命令"><a href="#一、kinit命令" class="headerlink" title="一、kinit命令"></a>一、kinit命令</h2><p>　　Kinit命令用于获取和缓存principal（当前主体）初始的票据授予票据（TGT），此票据用于Kerberos系统进行身份安全验证，实际上它是MIT在版权许可的条件下为kerberos协议所研发的免费实现工具<a href="http://web.mit.edu/kerberos/dist/index.html" target="_blank" rel="external">MIT Kerberos</a>（当前最新版本为<a href="https://web.mit.edu/kerberos/krb5-1.15/" target="_blank" rel="external">krb5-1.15.1</a>）的一部分，相关的配套命令还有<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/klist.html" target="_blank" rel="external">klist</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kdestroy.html" target="_blank" rel="external">kdestory</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kpasswd.html" target="_blank" rel="external">kpasswd</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/krb5-config.html" target="_blank" rel="external">krb5-config</a>等等，基本用法如下：</p>
<p><strong>kinit</strong> [-<strong>V</strong>][-<strong>l</strong> <em>lifetime</em>] [-<strong>s</strong> <em>start_time</em>][-<strong>r</strong> <em>renewable_life</em>][-<strong>p</strong> | -<strong>P</strong>][-<strong>f</strong> | -<strong>F</strong>][-<strong>a</strong>][-<strong>A</strong>][-<strong>C</strong>][-<strong>E</strong>][-<strong>v</strong>][-<strong>R</strong>][-<strong>k</strong> [-<strong>t</strong> <em>keytab_file</em>]][-<strong>c</strong> <em>cache_name</em>][-<strong>n</strong>][-<strong>S</strong> <em>service_name</em>][-<strong>I</strong> <em>input_ccache</em>][-<strong>T</strong> <em>armor_ccache</em>][-<strong>X</strong> <em>attribute</em>[<em>=value</em>]][<em>principal</em>]</p>
<p>　　各选项具体含义都不做介绍了，可参考<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kinit.html" target="_blank" rel="external">官网</a>，较常用的方式就如前言所示，根据指定的事先生成的kerberos.keytab文件为指定个体进行验证。验证通过后，就可以像平常一样进行Hadoop系列操作。那么它是如何进行验证的呢？其中的过程和原理又是怎样的？下面要介绍的kerberos协议细节将会回答你的疑惑。</p>
<h2 id="二、Kerberos协议"><a href="#二、Kerberos协议" class="headerlink" title="二、Kerberos协议"></a>二、Kerberos协议</h2><p>　　Kerberos（具体可参考<a href="https://tools.ietf.org/html/rfc1510" target="_blank" rel="external">RFC1510</a>）是一种网络<strong>身份验证</strong>的协议（注意它只包括验证环节，不负责授权，关于这两者后面会有介绍区分），用户只需输入一次身份验证信息，就可凭借此验证获得的票据授予票据（ticket-granting ticket）访问多个接入Kerberos的服务，即<a href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="external">SSO</a>（Single Sign On，单点登录）。</p>
<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul>
<li>Principal：安全个体，具有唯一命名的客户端或服务器。命名规则：主名称+实例+领域，如本文开头中的<code>sherlocky/admin@EXAMPLE.COM</code></li>
<li>Ticket：票据，一条包含客户端标识信息、会话密钥和时间戳的记录，客户端用它来向目标服务器认证自己</li>
<li>Session key：会话密钥，指两个安全个体之间使用的临时加密秘钥，其时效性取决于单点登录的会话时间长短</li>
<li>AS：认证服务器（Authentication Server），KDC的一部分。通常会维护一个包含安全个体及其秘钥的数据库，用于身份认证</li>
<li>SS：特定服务的提供端（Service Server）</li>
<li>TGS：许可证服务器（Ticket Granting Server），KDC的一部分，根据客户端传来的TGT发放访问对应服务的票据</li>
<li>TGT：票据授予票据（Ticket Granting Ticket），包含客户端ID、客户端网络地址、票据有效期以及<em>client/TGS</em>会话密钥</li>
<li>KDC：Key分发中心（key distribution center），是一个提供票据（tickets）和临时会话密钥（session keys）的网络服务。KDC服务作为客户端和服务器端信赖的第三方，为其提供初始票据（initial ticket）服务和票据授予票据（ticket-granting ticket）服务，前半部分有时被称为AS，后半部分有时则被称为TGS。</li>
</ul>
<p>　　关于概念的一点补充，博文<a href="http://www.360doc.com/content/15/0803/18/13047933_489282618.shtml" target="_blank" rel="external">Kerberos 服务的工作原理</a>中对于TGT和Ticket给出了巧妙的比喻：TGT类似于护照，Ticket则是签证，而访问特定的服务则好比出游某个国家。与护照一样，TGT可标识你的身份并允许你获得多个Ticket（签证），每个Ticket对应一个特定的服务，TGT和Ticket同样具有有效期，过期后就需要重新认证。</p>
<h3 id="2-认证过程"><a href="#2-认证过程" class="headerlink" title="2.认证过程"></a>2.认证过程</h3><p>　　Kerberos的认证过程可细分为三个阶段：初始验证、获取服务票据和服务验证。第一阶段主要是客户端向KDC中的AS发送用户信息，以请求TGT，然后到第二阶段，客户端拿着之前获得的TGT向KDC中的TGS请求访问某个服务的票据，最后阶段拿到票据（Ticket）后再到该服务的提供端验证身份，然后使用建立的加密通道与服务通信。</p>
<h4 id="2-1-初始验证"><a href="#2-1-初始验证" class="headerlink" title="2.1 初始验证"></a>2.1 初始验证</h4><p>　　此过程是客户端向AS请求获取TGT：</p>
<blockquote>
<ul>
<li>客户端向AS发送自身用户信息（如用户ID），该动作通常发生在用户初次登陆或使用kinit命令时</li>
<li>AS检查本地数据库是否存在该用户，若存在则返回如下两条信息：<ul>
<li>消息A：使用用户密钥加密的<em>Client/TGS</em>会话密钥，我们称之为SK1。其中用户密钥是通过对该用户在数据库中对应的密码hash生成的</li>
<li>消息B：使用TGS的密钥加密的TGT（包含客户端ID、客户端网络地址、票据有效期和SK1）</li>
</ul>
</li>
<li>当客户端收到消息A和B时，它会尝试用本地的用户密钥（由用户输入的密码或kerberos.keytab文件中的密码hash生成）对A进行解密，只有当本地用户密钥与AS中对应该用户的密钥匹配时才能解密成功。对A解密成功后，客户端就能拿到SK1，才能与TGS进行后续的会话，这里就相当于AS对客户端的一次验证，只有真正拥有正确用户密钥的客户端才能有机会与AS进行后续会话。而对于消息B，由于它是由TGS的密钥加密的，故无法对其解密，也看不到其中的内容。</li>
</ul>
</blockquote>
<h4 id="2-2-获取服务票据"><a href="#2-2-获取服务票据" class="headerlink" title="2.2 获取服务票据"></a>2.2 获取服务票据</h4><p>　　此过程则是客户端向TGS请求获取访问对应服务的票据：</p>
<blockquote>
<ul>
<li>当客户端要访问某个服务时，会向TGS发送如下两条消息：<ul>
<li>消息C：消息B的内容（即加密后的TGT）和服务ID</li>
<li>消息D：通过SK1加密的验证器（Authenticator，包括用户ID和时间戳）</li>
</ul>
</li>
<li><p>TGS收到消息C和D后，首先检查KDC数据库中是否存在所需服务，若存在则用自己的TGS密钥尝试对C中的消息B进行解密，这里也是客户端对TGS的反向认证，只有真正拥有正确密钥的TGS才能对B解密，解密成功后就能拿到其中的SK1，然后再用SK1解密消息D拿到包含用户ID和时间戳的Authenticator，通过比较分别来自C和D的用户ID，如果二者匹配，则向客户端返回如下两条消息：</p>
<ul>
<li>消息E：通过SK1加密的Client/SS会话密钥，该会话密钥是KDC新生成的随机密钥，用于将来客户端（Client）与服务端（SS）的通信加密，我们称之为SK2</li>
<li>消息F：使用服务的密钥加密的client-server票据（Ticket，包含用户ID、用户网络地址、票据有效期和SK2），之所以要用服务的密钥加密，是因为这个Ticket是给服务端看的，但又需要经过客户端传给服务端，且不能让客户端看到。那么就会有人问，为什么KDC不直接把消息E发送给服务端呢，这样岂不省事？问题就在于网络时延，若分开发送，消息E和F就不能确保同时到达服务端，考虑一个极端情况，KDC与服务之前的网络临时不通了，那么这段时间服务端就无法收到消息E，导致验证失败，而实际上该客户端是有访问权限的。通过公钥加密这种方式巧妙地回避了该问题</li>
</ul>
</li>
<li><p>客户端收到消息后，尝试用SK1解密消息E，得到Client/SS会话密钥SK2</p>
</li>
</ul>
</blockquote>
<h4 id="2-3-服务验证"><a href="#2-3-服务验证" class="headerlink" title="2.3 服务验证"></a>2.3 服务验证</h4><p>　　此过程是客户端与服务端相互验证，并通信</p>
<blockquote>
<ul>
<li><p>客户端向服务端发送如下两条消息：</p>
<ul>
<li><p>消息G：即上一步中的消息F——client-server票据</p>
</li>
<li><p>消息H：通过SK2加密的新的验证器（Authenticator，包含用户ID和时间戳）</p>
</li>
</ul>
</li>
<li><p>服务端收到消息后，尝试用自己的密钥解密消息G，这里实际上也是客户端对服务端的一次验证，只有真正拥有正确密钥的服务端才能正确解密，从而有机会拿到Ticket中的SK2，然后再用该SK2解密消息H，同TGS一样，对分别来自Ticket和Authenticator中的用户ID进行验证，如果匹配成功则返回一条确认消息：</p>
<ul>
<li>消息I：通过SK2加密的新时间戳</li>
</ul>
</li>
<li><p>客户端尝试用SK2解密消息I，得到新时间戳并验证其正确性，验证通过后，客户端与服务端就达到了相互信任，后续的通信都采用SK2加密，就好比建立了一条加密通道，二者即可享受服务与被服务的乐趣了</p>
</li>
</ul>
</blockquote>
<h3 id="3-前提（环境假设）"><a href="#3-前提（环境假设）" class="headerlink" title="3.前提（环境假设）"></a>3.前提（环境假设）</h3><ul>
<li>共享密钥：在协议工作前，客户端与KDC，KDC与服务端都确保有了各自的共享密钥。</li>
<li>防Dos攻击：Kerberos协议本身并没有解决Dos攻击（<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="external">Denial of service</a>，拒绝服务）防范问题，通常是由系统管理员和用户自己去定期探测并解决这样的攻击。</li>
<li>保障安全个体自身安全：参与到Kerberos协议中的安全个体必须确保其秘钥的安全性，一旦秘钥泄露或被攻击者暴力破解，那么攻击者就能随意地伪装安全个体，做一些不和谐的事情。</li>
<li>不循环利用Principal的唯一标识：访问控制的常用方式是通过访问控制列表（access control lists，ACLs）来对特定的安全个体进行授权。如果列表中有条记录对应的安全个体<em>A</em>早已被删除，而<em>A</em>的唯一标识却被后来新加的某个个体<em>B</em>再次利用，那么<em>B</em>就会继承之前<em>A</em>对应的权限，这是不安全的。避免这种风险的做法就是不复用Principal的唯一标识。</li>
<li>时钟同步：参与到协议中的主机必须有个时钟相互之间进行“松散同步”，松散度是可配置的。为什么需要同步各主机的时间呢？实际上从Kerberos的认证过程可以看到，任何人都可以向KDC请求任何服务的TGT，那攻击者就有可能中途截获正常用户的请求包，然后离线解密，就能合法地拿到TGT。为了防止这种重放攻击，票据（Ticket）会包含时间戳信息，即具有一定的有效期，因此如果主机的时钟与Kerberos服务器的时钟不同步，则认证会失败。在实践中，通常用网络时间协议（Network Time Protocol, NTP）软件来同步时钟。</li>
</ul>
<h3 id="4-局限性"><a href="#4-局限性" class="headerlink" title="4.局限性"></a>4.局限性</h3><ul>
<li>单点风险：过度依赖于KDC服务，Kerberos协议运转时需要KDC的持续响应，一旦KDC服务挂了，或者KDC数据库被攻破，那么Kerberos协议将无法运转</li>
<li>安全个体自身的安全：Kerberos协议之所以能运行在非安全网络之上，关键假设就是主机自身是安全的，一旦主机上的私钥泄露，攻击者将能轻易的伪装该个体实施攻击</li>
</ul>
<h2 id="三、Kerberos应用"><a href="#三、Kerberos应用" class="headerlink" title="三、Kerberos应用"></a>三、Kerberos应用</h2><h3 id="1-Hadoop安全机制"><a href="#1-Hadoop安全机制" class="headerlink" title="1.Hadoop安全机制"></a>1.Hadoop安全机制</h3><p>　　Apache Hadoop 最初设计时并没有考虑安全问题，它不对用户或服务进行验证，任何人都可以向集群提交代码并得到执行，使用Hadoop的组织只能把集群隔离到专有网络，确保只有经过授权的用户才能访问，但这也并不能解决Hadoop集群内部的安全问题。为了增强Hadoop的安全机制，从1.0.0版本以后，引入Kerberos认证机制，即用户跟服务通信以及各个服务之间通信均用Kerberos认证，在用户认证后任务执行、访问服务、读写数据等均采用特定服务发起访问token，让需求方凭借token访问相应服务和数据。下面以Yarn中提交MR任务为例：</p>
<blockquote>
<p>A、用户先向KDC请求TGT，做初始验证</p>
<p>B、用户通过TGT向KDC请求访问服务的Ticket</p>
<p>C、客户端通过ticket向服务认证自己，完成身份认证</p>
<p>D、完成身份认证后，客户端向服务请求若干token供后续任务执行时认证使用</p>
<p>F、客户端连同获取的token一并提交任务，后续任务执行使用token与服务进行认证</p>
</blockquote>
<h2 id="四、其他安全机制"><a href="#四、其他安全机制" class="headerlink" title="四、其他安全机制"></a>四、其他安全机制</h2><h3 id="1-OAuth认证"><a href="#1-OAuth认证" class="headerlink" title="1.OAuth认证"></a>1.OAuth认证</h3><p>　　OAuth（Open Authorization，开放授权）用于第三方授权服务，现常用的第三方账号登陆都是采用该机制。比如我用github账号登陆LeetCode官网，LeetCode并不需要知道我的github账号、密码，它只需要将登陆请求转给授权方（github），由它进行认证授权，然后把授权信息传回LeetCode实现登陆。</p>
<h3 id="2-LDAP"><a href="#2-LDAP" class="headerlink" title="2.LDAP"></a>2.LDAP</h3><p>　　LDAP（Lightweight Directory Access Protocol，轻量级目录访问协议）是一种用于访问目录服务的业界标准方法，LDAP目录以树状结构来存储数据，针对读取操作做了特定优化，比从专门为OLTP优化的关系数据库中读取数据快一个量级。LDAP中的安全模型主要通过身份认证、安全通道和访问控制来实现，它可以把整个目录、目录的子树、特定条目、条目属性集火符合某过滤条件的条目作为控制对象进行授权，也可以把特定用户、特定组或所有目录用户作为授权主体进行授权，也可以对特定位置（如IP或DNS名称）进行授权。</p>
<h3 id="3-SSL"><a href="#3-SSL" class="headerlink" title="3.SSL"></a>3.<a href="SSL/TLS协议运行机制的概述">SSL</a></h3><p>SSL（Secure Sockets Layer，安全套接层）是目前广泛应用的加密通信协议，其基本思路是采用公钥加密法，即客户端先向服务器端索要公钥，然后用公钥加密信息，服务端收到密文后用自己的私钥解密。它的安全机制包含如下三点：</p>
<blockquote>
<ul>
<li>连接的私密性：利用会话密钥通过对称加密算法（DES）对传输数据进行加密，并利用RSA对会话密钥本身加密</li>
<li>身份验证：基于数字证书利用数字签名方法进行身份验证，SSL服务器和客户端通过PKI（Public Key Infrastructure）提供的机制从CA获取证书</li>
<li>内容可靠：使用基于密钥的MAC（Message Authentication Code，消息验证码）验证消息的完整性，防窜改</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell编程 </tag>
            
            <tag> kerberos </tag>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>http://www.yangbing.club/2017/04/10/common-linux-commands/</url>
      <content type="html"><![CDATA[<p>  最近项目中有用到Shell脚本，难免会与一些以前没用到甚至没见过的Linux命令打交道，借此番机会也算是学习一哈，记录在此，以供日后参考。后续若再接触新的命令也会更新到此。</p>
<a id="more"></a>
<style> table th:first-of-type { width: 100px; } </style>

<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html#tee-invocation" target="_blank" rel="external">tee</a></h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">用途</td>
<td>重定向输出到多个文件或进程</td>
</tr>
<tr>
<td style="text-align:left">简介</td>
<td>该命令读取标准输入，并将内容同时输出到标准输出（屏幕）和多个文件中。</td>
</tr>
<tr>
<td style="text-align:left">应用场景</td>
<td>当我们重定向输出到文件中时，使用常规的“&gt;”符号无法直接从屏幕上看到原输出，使用tee就可在重定向文件的同时将内容输出到标准输出（屏幕）</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>tee [OPTION]…   [FILE]…<br>-a, 追加到给定的文件，没有此选项时默认是覆盖<br>-i, 忽略中断信号</td>
</tr>
<tr>
<td style="text-align:left">示例</td>
<td>ls &#124; tee &#124; out.txt<br>cat 1.txt &#124; tee -a out.txt</td>
</tr>
<tr>
<td style="text-align:left">注意</td>
<td>在使用管道线时，前一个命令的标准错误输出不会被tee读取。</td>
</tr>
</tbody>
</table>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation" target="_blank" rel="external">date</a></h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">简介</td>
<td>根据给定格式显示日期时间或设置系统日期时间</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>date [OPTION]… [+FORMAT]<br>date [-u&#124;–utc&#124;–universal][ MMDDhhmm[[CC]YY][.ss] ]<br><br>OPTION: -d -f -r -R -rfc-2822 -s -u –help<br>FORMAT: %% %a %A %b %B %c %C %d %D…</td>
</tr>
<tr>
<td style="text-align:left">示例</td>
<td>date -d now +%Y%m%d   用指定格式显示当前时间<br>date -r text.log   显示文件最后修改时间<br>date -s “2013-09-06 00:00:00”   设置系统时间</td>
</tr>
</tbody>
</table>
<h2 id="getopts-getopt"><a href="#getopts-getopt" class="headerlink" title="getopts/getopt"></a>getopts/getopt</h2><table>
<thead>
<tr>
<th style="text-align:left">要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">简介</td>
<td>获取并处理命令行参数</td>
</tr>
<tr>
<td style="text-align:left">用法</td>
<td>getopts option_string variable<br>第一个参数<strong>option_string</strong>是字符串，包括字符和”:”，每个字符都是一个有效的选项，若字符后带有”:”，表示这个字符有自己的参数。<br>getopts命令会读取命令行参数，当遇到连字符”-“，会判断”-“后的字符是否出现在option_string定义的选项中，若有匹配，则将其赋给第二个参数<strong>variable</strong>；否则将variable设为”?”。若选项有自己的参数，getopts会从命令行该选项后读取参数值：若该值存在，则将被赋给一个特殊变量<strong>OPTARG</strong>中；否则将在OPTARG中存放一个”?”，并在标准错误上显示一条消息。</td>
</tr>
<tr>
<td style="text-align:left">注意项</td>
<td>1.getopts是shell内置命令，不能处理长选项（如：–prefix=../），而getopt是C的库函数，可处理长选项。<br>2.当option_string以”:”开头时，表示区分invalid option错误和miss option argument，对于前者，variable会被设置为”?”，对于后者，variable会被设置为”:”（见示例）；当option_string不以”:”开头时，对于上述两种错误，variable都被设为”?”。</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">while getopts &apos;:hf:g:s:t:&apos; OPTION</div><div class="line">do</div><div class="line">	case $OPTION</div><div class="line">	in</div><div class="line">		h) usage;;			#h后面无&quot;:&quot;，表示不带参数，usage是打印用法详情</div><div class="line">		f) FILENAME=$OPTARG;;</div><div class="line">		g) GROUP=$OPTARG;;</div><div class="line">		s) START=$OPTARG;;</div><div class="line">		t) TYPE=$OPTARG;;</div><div class="line">		:) echo &quot;选项\&quot;-$OPTARG\&quot; 后面缺少对应参数，将使用默认值;;</div><div class="line">		\?)echo &quot;错误的选项 -$OPTARG,将退出&quot;;;</div><div class="line">	esac</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/wc-invocation.html#wc-invocation" target="_blank" rel="external">wc</a></h2><table>
<thead>
<tr>
<th>要点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>简介</td>
<td>word count，统计给定文件（可指定多个）或标准输入（没给定文件时）中字节数、字符数、词数（以空白符分割的词数）以及行数。</td>
</tr>
<tr>
<td>用法</td>
<td><strong>wc</strong> [<em>option</em>]… [<em>file</em>]…<br>option有如下选项：<br>-c, –bytes　　　　打印字节数<br>-m, –chars 　　　　打印字符数<br>-l, –lines　　　　打印行数<br>-L, –max-line-length　　　　打印最长行的长度<br>-w, –words　　　　打印词数，一个词被定义为以空白符分割的字符串<br>    –help　　　　展示帮助信息</td>
</tr>
<tr>
<td>注意</td>
<td>输出：wc会为每个文件打印一行计数，如果文件是作为参数，则会为每个文件打印两列：统计数 文件名，并在最后追加一行打印总两列：计数 total。<br>wc通常与管道线结合使用，直接打印计数</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wc -l readme.txt version.txt        #统计指定的两个文件的行数，输出如下</div><div class="line">27	readme.txt</div><div class="line"> 1	version.txt</div><div class="line">28	total</div><div class="line">cat readme.txt | wc -c              #结合管道，只输出统计数，如下</div><div class="line">898</div><div class="line">ls -l | wc -l                       #统计当前目录下的文件数</div><div class="line">8</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux命令 </tag>
            
            <tag> Shell编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring事务管理]]></title>
      <url>http://www.yangbing.club/2017/03/22/spring-transaction-management/</url>
      <content type="html"><![CDATA[<p>  对大多数Java开发者来说，Spring事务管理是Spring应用中最常用的功能，使用也比较简单。本文主要从三个方面（基本概述、基于源码的原理分析以及需要注意的细节）来逐步介绍Spring事务管理的相关知识点及原理，作为Spring事务管理的学习总结。</p>
<a id="more"></a>
<h1 id="Spring事务管理概述"><a href="#Spring事务管理概述" class="headerlink" title="Spring事务管理概述"></a>Spring事务管理概述</h1><h2 id="一、几个重要概念"><a href="#一、几个重要概念" class="headerlink" title="一、几个重要概念"></a>一、几个重要概念</h2><h3 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1.事务隔离级别"></a>1.事务隔离级别</h3><p>  ANSI/ISO SQL92标准定义了4个<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Isolation.html" target="_blank" rel="external">隔离级别</a>：<strong>READ UNCOMMITED</strong>、<strong>READ COMMITED</strong>、<strong>REPEATABLE READ</strong>和<strong>SERIALIZABLE</strong>，隔离程度由弱到强。不同的事务隔离级别能够解决数据并发问题的能力不同，它与数据库并发性是对立的，两者此消彼长。</p>
<h3 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2.事务传播行为"></a>2.事务传播行为</h3><p>  事务传播主要是为了描述两个服务接口方法嵌套调用时，被调用者在调用者有无事务时所采取的事务行为。Spring框架在TransactionDefinition接口中固定了7种事务传播行为：<strong>PROPAGATION_REQUIRED</strong>、 <strong>PROPAGATION_SUPPORTS</strong>、 <strong>PROPAGATION_MANDATORY</strong>、     <strong>PROPAGATION_REQUIRES_NEW</strong>、 <strong>PROPAGATION_NOT_SUPPORTED</strong>、 <strong>PROPAGATION_NEVER</strong>、  <strong>PROPAGATION_NESTED</strong>。前面的6种是从EJB中引入的，而<strong>PROPAGATION_NESTED</strong>是Spring特有的。具体可参见<a href="http://pjoc.pub/shen-ru-qian-chu-shi-wu-4-springshi-wu-de-chuan-bo-xing-wei/" target="_blank" rel="external">深入浅出事务(4):Spring事务的传播行为</a>，该文结合具体代码示例，通俗易懂。</p>
<h3 id="3-事务同步管理器"><a href="#3-事务同步管理器" class="headerlink" title="3.事务同步管理器"></a>3.事务同步管理器</h3><p>  <strong>TransactionSynchronizationManager</strong>——事务管理的基石，主要是为了解决事务管理在多线程环境下资源（如Connection、Session等）的并发访问问题：使用ThreadLocal为不同事务线程维护独立的资源副本，以及事务配置属性和运行状态信息，使各个事务线程互不影响。</p>
<h3 id="4-事务管理SPI"><a href="#4-事务管理SPI" class="headerlink" title="4.事务管理SPI"></a>4.事务管理SPI</h3><p>  <a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">SPI</a>（Service Provider Interface）是一个框架开放给第三方的可扩展服务接口，供其具体实现，以支持框架的扩展性和插件式组件。Spring事务管理SPI主要包括3个接口：<strong>PlatformTransactionManager</strong>（进行事务的创建、提交或回滚）、<strong>TransactionDefinition</strong>（定义事务属性，如隔离级别）和<strong>TransactionStatus</strong>（事务运行时状态，如是否已完成）。这三者通过PlatformTransactionManager的如下接口进行关联：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据事务定义创建事务，并由TransactionStatus表示它</span></div><div class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span></span>;</div><div class="line"><span class="comment">// 根据事务运行时状态提交或回滚事务</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><p>  三种方式：编程、XML配置和注解。第一方式对应用代码侵入性较大，现已较少使用。后面两种则都属于声明式事务管理的方式，两者的共同点是都提供事务管理信息的元数据，只不过方式不同。前者对代码的侵入性最小，也最为常用，后者则属于较为折衷的方案，有一点侵入性，但相对也较少了配置，各有优劣，<a href="http://jinnianshilongnian.iteye.com/blog/1879910" target="_blank" rel="external">依场景需求而定</a>。<strong>声明式事务管理</strong>是Spring的一大亮点，利用AOP技术将事务管理作为切面动态织入到目标业务方法中，让事务管理简单易行。</p>
<p>  而不管是使用哪种方式，<strong>数据源</strong>、<strong>事务管理器</strong>都是必须的，一般通过XML的Bean配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destory-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.driverClass&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.jdbcUrl&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.maxPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.minPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;initialPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 指定事务管理器标识，可被@Transactional注解引用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"txManagerA"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="1-编程式事务管理"><a href="#1-编程式事务管理" class="headerlink" title="1.编程式事务管理"></a>1.编程式事务管理</h3><p>  采用与DAO模板类一样的开闭思想，Spring提供了线程安全的<strong>TransactionTemplate</strong>模板类来处理不变的事务管理逻辑，将变化的部分抽象为回调接口<strong>TransactionCallback</strong>供用户自定义数据访问逻辑。使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> DaoA daoA;</div><div class="line">	<span class="meta">@autowried</span></div><div class="line">	<span class="keyword">private</span> TransactionTemplate template;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</div><div class="line">		template.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</div><div class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</div><div class="line">				daoA.addElement(ele);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  TransactionTemplate的配置信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"txManager"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"isolationLevelName"</span> <span class="attr">value</span>=<span class="string">"ISOLATION_DEFAULT"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>  当然，用户也可以不使用TransactionTemplate，而是直接基于原始的<a href="#4-事务管理SPI">Spring事务管理SPI</a>进行编程式事务管理，只不过这种方式对代码侵入性最大，不推荐使用，这里也就不多做介绍了。</p>
<h3 id="2-基于XML配置的事务管理"><a href="#2-基于XML配置的事务管理" class="headerlink" title="2.基于XML配置的事务管理"></a>2.基于XML配置的事务管理</h3><p>  Spring早期版本，是通过<strong>TransactionProxyFactoryBean</strong>代理类实施声明式事务配置，由于这种方式的种种弊端，后来引入AOP切面描述语言后，提出一种更简洁的基于Schema的配置方式：<strong>tx/aop命名空间</strong>，使声明式事务配置更简洁便利。</p>
<h4 id="2-1基于Bean的配置"><a href="#2-1基于Bean的配置" class="headerlink" title="2.1基于Bean的配置"></a>2.1基于Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceATarget"</span> <span class="attr">class</span>=<span class="string">"org.sherlocky.book.spring3x.service.ServiceAImpl"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceA"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span></span></div><div class="line">      <span class="attr">p:transactionManager-ref</span>=<span class="string">"txManager"</span></div><div class="line">      <span class="attr">p:target-ref</span>=<span class="string">"serviceATarget"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"get*"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="2-1基于Schema的配置（常用）"><a href="#2-1基于Schema的配置（常用）" class="headerlink" title="2.1基于Schema的配置（常用）"></a>2.1基于Schema的配置（常用）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.sherlocky.book.spring3x.service.*ServiceA.*(..))"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-3基于注解的事务管理"><a href="#2-3基于注解的事务管理" class="headerlink" title="2.3基于注解的事务管理"></a>2.3基于注解的事务管理</h4><p>  通过<strong>@Transactional</strong>对需要事务增强的Bean接口、实现类或方法进行标注，在容器中配置<strong><tx:annotation-driven></tx:annotation-driven></strong>以启用基于注解的声明式事务。注解所提供的事务属性信息与XML配置中的事务信息基本一致，只不过是另一种形式的元数据而已。使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(<span class="string">"txManagerA"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> DaoA daoA;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring事务管理源码分析-spring3-1-0"><a href="#Spring事务管理源码分析-spring3-1-0" class="headerlink" title="Spring事务管理源码分析-(spring3.1.0)"></a>Spring事务管理源码分析-(spring3.1.0)</h1><p>  源码分析一定要有目的性，至少有一条清晰的主线，比如要搞清楚框架的某一个功能点背后的代码组织，前因后果，而不是一头扎进源码里，无的放矢。本文就从Spring事务管理的三种使用方式入手，逐个分析Spring在背后都为我们做了些什么。</p>
<h2 id="一、编程式"><a href="#一、编程式" class="headerlink" title="一、编程式"></a>一、编程式</h2><h3 id="1-TransactionTemplate"><a href="#1-TransactionTemplate" class="headerlink" title="1.TransactionTemplate"></a>1.TransactionTemplate</h3><p>  TransactionTemplate是编程式事务管理的入口，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTemplate</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">TransactionOperations</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line">	<span class="keyword">private</span> PlatformTransactionManager transactionManager;</div><div class="line">  	...</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</div><div class="line">			<span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager) <span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);【<span class="number">1</span>】</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);【<span class="number">2</span>】</div><div class="line">			T result;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				result = action.doInTransaction(status);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (RuntimeException ex) &#123;【<span class="number">3</span>】</div><div class="line">				<span class="comment">// Transactional code threw application exception -&gt; rollback</span></div><div class="line">				rollbackOnException(status, ex);</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Error err) &#123;【<span class="number">4</span>】</div><div class="line">				<span class="comment">// Transactional code threw error -&gt; rollback</span></div><div class="line">				rollbackOnException(status, err);</div><div class="line">				<span class="keyword">throw</span> err;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;【<span class="number">5</span>】</div><div class="line">				<span class="comment">// Transactional code threw unexpected exception -&gt; rollback</span></div><div class="line">				rollbackOnException(status, ex);</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.transactionManager.commit(status);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1整体概述"><a href="#1-1整体概述" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionTemplate提供了唯一的编程入口execute，它接受用于封装业务逻辑的TransactionCallback接口的实例，返回用户自定义的事务操作结果T。具体逻辑：先是判断transactionManager是否是接口CallbackPreferringPlatformTransactionManager的实例，若是则直接委托给该接口的execute方法进行事务管理；否则交给它的核心成员PlatformTransactionManager进行事务的创建、提交或回滚操作。</p>
<p>  CallbackPreferringPlatformTransactionManger接口扩展自PlatformTransactionManger，根据以下的官方源码注释可知，该接口相当于是把事务的创建、提交和回滚操作都封装起来了，用户只需要传入TransactionCallback接口实例即可，而不是像使用PlatformTransactionManger接口那样，还需要用户自己显示调用getTransaction、rollback或commit进行事务管理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Implementors of this interface automatically express a preference for</span></div><div class="line"><span class="comment">// callbacks over programmatic getTransaction, commit and rollback calls.</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CallbackPreferringPlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title">PlatformTransactionManager</span></span>&#123;...&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2具体剖析"><a href="#1-2具体剖析" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="DefaultTransactionDefinition"><a href="#DefaultTransactionDefinition" class="headerlink" title="DefaultTransactionDefinition"></a>DefaultTransactionDefinition</h5><p>  可以看到transactionTemplate直接扩展自DefaultTransactionDefinition，让自身具有默认事务定义功能，【1】和【2】处将<strong>this</strong>作为execute或getTransaction的实参传入，说明该事务管理是采用默认的事务配置，可以看下DefaultTransactionDefinition中定义的默认配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> propagationBehavior = PROPAGATION_REQUIRED; <span class="comment">//常用选择：当前没有事务，则新建；否则加入到该事务中</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> isolationLevel = ISOLATION_DEFAULT;         <span class="comment">//使用数据库默认的隔离级别</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = TIMEOUT_DEFAULT;                  <span class="comment">//-1，使用数据库的超时设置</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> readOnly = <span class="keyword">false</span>;                       <span class="comment">//非只读事务</span></div></pre></td></tr></table></figure>
<h5 id="TransactionOperations和InitializingBean"><a href="#TransactionOperations和InitializingBean" class="headerlink" title="TransactionOperations和InitializingBean"></a>TransactionOperations和InitializingBean</h5><p>而TransactionOperations和InitializingBean接口分别定义了如下单个方法。InitializingBean是Spring在初始化所管理的Bean时常用的接口，以确保某些属性被正确的设置或做一些初始化时的后处理操作，可参考<a href="http://blog.csdn.net/maclaren001/article/details/37039749" target="_blank" rel="external">InitializingBean的作用</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span></span>;   <span class="comment">//TransactionTemplate的编程接口</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span></span>;                      <span class="comment">//Bean初始化时调用：在成员变量装配之后</span></div></pre></td></tr></table></figure>
<p>TransactionTemplate实现InitializingBean接口，主要是确保其核心成员transactionManager是否已初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'transactionManager' is required"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  从【3】【4】【5】可看出，基于TransactionTemplate的事务管理，在发生RuntimeException、Error或Exception时都会回滚，正常时才提交事务。</p>
<h3 id="2-PlatformTransactionManager"><a href="#2-PlatformTransactionManager" class="headerlink" title="2. PlatformTransactionManager"></a>2. PlatformTransactionManager</h3><p>  该接口在Spring事务管理中扮演着重要角色。看下getTransaction的源码注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Return a currently active transaction or create a new one, according to</span></div><div class="line"><span class="comment">// the specified propagation behavior.</span></div></pre></td></tr></table></figure>
<p>该方法的主要作用就是根据TransactionDefinition返回当前有效事务或新建事务，其中就包含了<a href="#2-事务传播行为">事务传播行为</a>的控制逻辑。其<strong>唯一实现</strong>就是该接口对应的抽象类AbstractPlatformTransactionManager，这是典型的接口-&gt;抽象类-&gt;具体实现类三层结构，以<strong>提高代码复用性</strong>。其中抽象类是负责实现一些共有逻辑，而具体子类则是各自实现差异化功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明为final，确保不能再被子类重写</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</div><div class="line">		Object transaction = doGetTransaction();</div><div class="line">        ...</div><div class="line">		<span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;【<span class="number">1</span>】</div><div class="line">			<span class="keyword">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</div><div class="line">		&#125;</div><div class="line">        ...</div><div class="line">		<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</div><div class="line">					<span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</div><div class="line">				definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</div><div class="line">		    definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">			SuspendedResourcesHolder suspendedResources = suspend(<span class="keyword">null</span>);【<span class="number">2</span>】</div><div class="line">			...</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">				resume(<span class="keyword">null</span>, suspendedResources);【<span class="number">3</span>】</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">				resume(<span class="keyword">null</span>, suspendedResources);</div><div class="line">				<span class="keyword">throw</span> err;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</div><div class="line">			<span class="keyword">return</span> prepareTransactionStatus(definition, <span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>可以看到它会根据【1】处的isExistingTransaction方法判断当前是否有事务而分别作出不同的处理，包括挂起和恢复当前事务等，有兴趣的童鞋可以深入【2】处的supend和【3】处的resume方法，会发现对事务的挂起和恢复操作实际是委托于<strong>TransactionSynchronizationManager</strong>来做的，而该类在前面也提过到，是Spring管理事务资源的，这几个重要接口和类的关系渐渐清晰了，由于篇幅有限，后面打算单独另起一篇细讲。</p>
<h2 id="2-声明式"><a href="#2-声明式" class="headerlink" title="2.声明式"></a>2.声明式</h2><p>  基于XML和注解的方式都是属于声明式事务管理，只是提供元数据的形式不用，索性就一起讲了。声明式事务的核心实现就是利用AOP技术，将事务逻辑作为环绕增强MethodInterceptor动态织入目标业务方法中。其中的核心类为TransactionInterceptor。从以下代码注释可知，TransactionInterceptor是专用于声明式事务管理的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></div><div class="line"><span class="comment">// management using the common Spring transaction infrastructure &#123;PlatformTransactionManager&#125;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<h3 id="1-TransactionInterceptor"><a href="#1-TransactionInterceptor" class="headerlink" title="1.TransactionInterceptor"></a>1.TransactionInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></div><div class="line"><span class="comment">// management using the common Spring transaction infrastructure</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>从上述注释中可知该类是专用于声明式事务管理的，它的核心方法如下invoke：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// If the transaction attribute is null, the method is non-transactional.</span></div><div class="line">		<span class="keyword">final</span> TransactionAttribute txAttr =</div><div class="line">				getTransactionAttributeSource().getTransactionAttribute(invocation.getMethod(), targetClass);【<span class="number">1</span>】</div><div class="line">		<span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);【<span class="number">2</span>】</div><div class="line">		<span class="keyword">final</span> String joinpointIdentification = methodIdentification(invocation.getMethod(), targetClass);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</div><div class="line">			<span class="comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></div><div class="line">			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);【<span class="number">3</span>】</div><div class="line">			Object retVal = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></div><div class="line">				<span class="comment">// This will normally result in a target object being invoked.</span></div><div class="line">				retVal = invocation.proceed();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				<span class="comment">// target invocation exception</span></div><div class="line">				completeTransactionAfterThrowing(txInfo, ex);【<span class="number">4</span>】</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				cleanupTransactionInfo(txInfo);</div><div class="line">			&#125;</div><div class="line">			commitTransactionAfterReturning(txInfo);【<span class="number">5</span>】</div><div class="line">			<span class="keyword">return</span> retVal;</div><div class="line">		&#125;</div><div class="line">  		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,</div><div class="line">						<span class="keyword">new</span> TransactionCallback&lt;Object&gt;() &#123;</div><div class="line">							<span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</div><div class="line">								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</div><div class="line">								<span class="keyword">try</span> &#123;</div><div class="line">									<span class="keyword">return</span> invocation.proceed();</div><div class="line">								&#125;</div><div class="line">							    ...</div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line">                ...</div><div class="line">			&#125;</div><div class="line">			...</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1整体概述-1"><a href="#1-1整体概述-1" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionInterceptor实现了MethodInterceptor接口，将事务管理的逻辑封装在环绕增强的实现中，而目标业务代码则抽象为MethodInvocation（该接口扩展自Joinpoint，故实际是AOP中的连接点），使得事务管理代码与业务逻辑代码完全分离，可以对任意目标类进行无侵入性的事务织入。具体逻辑：先根据MethodInvocation获取事务属性TransactionAttribute，根据TransactionAttribute得到对应的PlatformTransactionManager，再根据其是否是CallbackPreferringPlatformTransactionManager的实例分别做不同的处理，整体上跟<a href="#1-TransactionTemplate">TransactionTemplate</a>中大相径庭，后面主要是介绍几点不同的地方。</p>
<h4 id="1-2具体剖析-1"><a href="#1-2具体剖析-1" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h5><p>  MethodInterceptor是AOP中的环绕增强接口，同一个连接点可以有多个增强，而TransactionInterceptor扩展自该接口，说明事务管理只是众多横切逻辑中的一种，还有很多其他的，比如像日志记录、性能监控等，对于AOP而言并无区别，它会按照增强的顺序统一处理。关于AOP，后期会单独一篇详细介绍。</p>
<h5 id="TransactionAttribute和TransactionAttributeSource"><a href="#TransactionAttribute和TransactionAttributeSource" class="headerlink" title="TransactionAttribute和TransactionAttributeSource"></a>TransactionAttribute和TransactionAttributeSource</h5><p>  在代码【1】处，委托给TransactionAttributeSource根据MethodInvocation获取对应的事务属性TransactionAttribute，先来看下TransactionAttribute：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttribute</span> <span class="keyword">extends</span> <span class="title">TransactionDefinition</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a qualifier value associated with this transaction attribute.</div><div class="line">	 * &lt;p&gt;This may be used for choosing a corresponding transaction manager</div><div class="line">	 * to process this specific transaction.</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">getQualifier</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Should we roll back on the given exception?</div><div class="line">	 * <span class="doctag">@param</span> ex the exception to evaluate</div><div class="line">	 * <span class="doctag">@return</span> whether to perform a rollback or not</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span></span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是在TransactionDefinition的基础上增加了两个可定制属性，使用过XML配置和注解方式的童鞋应该都对qualifier和rollback-for再熟悉不过了，那两个新增属性就是为了支持这两个配置项的。再来看下TransactionAttributeSource：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface used by TransactionInterceptor. Implementations know</div><div class="line"> * how to source transaction attributes, whether from configuration,</div><div class="line"> * metadata attributes at source level, or anywhere else.</div><div class="line"> * <span class="doctag">@see</span> TransactionInterceptor#setTransactionAttributeSource</div><div class="line"> * <span class="doctag">@see</span> TransactionProxyFactoryBean#setTransactionAttributeSource</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttributeSource</span> </span>&#123;</div><div class="line">	<span class="function">TransactionAttribute <span class="title">getTransactionAttribute</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之所以有这个接口，是因为Spring提供了XML配置、注解等不同的事务元数据形式，即事务属性的来源多样，该接口正是将事务配置的来源进行抽象，不同的来源有对应不同的实现类，接口单一职责，巧妙精简的设计！类图如下，AnnotationTransactionAttributeSource是注解相关，而NameMatchTransactionAttributeSource、MatchAlwaysTransactionAttributeSource等是XML配置相关。</p>
<p><img src="/2017/03/22/spring-transaction-management/TransactionAttribute.png" alt="TransactionAttribute类图"></p>
<h5 id="TransactionAspectSupport"><a href="#TransactionAspectSupport" class="headerlink" title="TransactionAspectSupport"></a>TransactionAspectSupport</h5><p>该抽象父类是事务切面的基本处理类，实现了一些共有方法，如代码【2】处determineTransactionManager(..)根据TransactionAttribute得到对应的PlatformTransactionManager，以及【3】处createTransactionIfNecessary创建事务，【4】处completeTransactionAfterThrowing回滚事务，【5】处commitTransactionAfterReturning提交事务等基本操作，底层同样是委托PlatformTransactionManager进行处理的。这里主要看下事务的回滚操作，跟TransactionTemplate是有区别的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completeTransactionAfterThrowing</span><span class="params">(TransactionInfo txInfo, Throwable ex)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (txInfo != <span class="keyword">null</span> &amp;&amp; txInfo.hasTransaction()) &#123;</div><div class="line">			...</div><div class="line">			<span class="keyword">if</span> (txInfo.transactionAttribute.rollbackOn(ex)) &#123;【<span class="number">1</span>】</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (TransactionSystemException ex2) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</div><div class="line">					ex2.initApplicationException(ex);</div><div class="line">					<span class="keyword">throw</span> ex2;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (RuntimeException ex2) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</div><div class="line">					<span class="keyword">throw</span> ex2;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">					logger.error(<span class="string">"Application exception overridden by rollback error"</span>, ex);</div><div class="line">					<span class="keyword">throw</span> err;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">              	<span class="keyword">try</span> &#123;</div><div class="line">					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</div><div class="line">				&#125;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>从【1】处的transactionAttribute.rollbackon(ex)可看出，事务属性中的rollbackOn是在这里生效的，在发生指定异常时选择回滚或提交，是用户可配置的，而不像TransactionTemplate是固定的全部回滚。</p>
<h3 id="2-TransactionProxyFactoryBean"><a href="#2-TransactionProxyFactoryBean" class="headerlink" title="2.TransactionProxyFactoryBean"></a>2.TransactionProxyFactoryBean</h3><p>该类是早期<a href="#2-1基于Bean的配置">基于Bean的XML配置方式</a>实现声明式事务的核心类，之所以放在后面讲，是因为该方式已不被推荐使用，先来看下定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Proxy factory bean for simplified declarative transaction handling.</div><div class="line"> * This is a convenient alternative to a standard AOP</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125;</div><div class="line"> * with a separate &#123;<span class="doctag">@link</span> TransactionInterceptor&#125; definition.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;strong&gt;HISTORICAL <span class="doctag">NOTE:</span>&lt;/strong&gt; This class was originally designed to cover the</div><div class="line"> * typical case of declarative transaction demarcation: namely, wrapping a singleton</div><div class="line"> * target object with a transactional proxy, proxying all the interfaces that the target</div><div class="line"> * implements. However, in Spring versions 2.0 and beyond, the functionality provided here</div><div class="line"> * is superseded by the more convenient &#123;<span class="doctag">@code</span> tx:&#125; XML namespace. See the &lt;a</div><div class="line"> * href="http://bit.ly/qUwvwz"&gt;declarative transaction management&lt;/a&gt; section of the</div><div class="line"> * Spring reference documentation to understand the modern options for managing</div><div class="line"> * transactions in Spring applications.</div><div class="line"> * ...</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractSingletonProxyFactoryBean</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> TransactionInterceptor transactionInterceptor = <span class="keyword">new</span> TransactionInterceptor();</div><div class="line">	<span class="keyword">private</span> Pointcut pointcut;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createMainInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.transactionInterceptor.afterPropertiesSet();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.pointcut != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(<span class="keyword">this</span>.pointcut, <span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Rely on default pointcut.</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TransactionAttributeSourceAdvisor(<span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码的声明已经相当清晰，大致说明了该类的来龙去脉，忍不住直接贴上来了，感兴趣可自行阅读。这里主要是看下其实现思路：事务处理逻辑是委托给其成员TransactionInterceptor，而将事务逻辑织入目标类的工作则交由AbstractSingletonProxyFactoryBean来处理。FactoryBean是Spring中广泛使用的用来定制一些较复杂Bean的实例化逻辑，因此从类名上就可看出，AbstractSingletonProxyFactoryBean的主要工作则是实例化并返回一个单例的Proxy对象。有了Proxy对象，织入的工作就轻而易举了，此时TransactionInterceptor只是Proxy的众多Advisor中的一个，最后由Proxy创建拥有了事务增强的代理对象即可。</p>
<p>  以下是AbstractSingletonProxyFactoryBean中Proxy的实例化过程，全部在afterPropertiesSet中完成。其中的createMainInterceptor()是在其子类TransactionProxyFactoryBean中实现的，对应事务增强逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSingletonProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">ProxyConfig</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.target == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'target' is required"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.target <span class="keyword">instanceof</span> String) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'target' needs to be a bean reference, not a bean name as value"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.proxyClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.proxyClassLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();【<span class="number">1</span>】</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.preInterceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.preInterceptors) &#123;</div><div class="line">				proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Add the main interceptor (typically an Advisor).</span></div><div class="line">		proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(createMainInterceptor()));</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.postInterceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.postInterceptors) &#123;</div><div class="line">				proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		proxyFactory.copyFrom(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		TargetSource targetSource = createTargetSource(<span class="keyword">this</span>.target);</div><div class="line">		proxyFactory.setTargetSource(targetSource);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.proxyInterfaces != <span class="keyword">null</span>) &#123;</div><div class="line">			proxyFactory.setInterfaces(<span class="keyword">this</span>.proxyInterfaces);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!isProxyTargetClass()) &#123;</div><div class="line">			<span class="comment">// Rely on AOP infrastructure to tell us what interfaces to proxy.</span></div><div class="line">			proxyFactory.setInterfaces(</div><div class="line">					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), <span class="keyword">this</span>.proxyClassLoader));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.proxy = proxyFactory.getProxy(<span class="keyword">this</span>.proxyClassLoader);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码【1】处可以看到，ProxyFactory是创建Proxy对象的关键类，感兴趣的童鞋可以跟进ProxyFactory的代码，可发现最终创建Proxy对象的是DefaultAopProxyFactory，细节如下：根据config配置，选择创建我们所熟知的两种AopProxy：JDK的JdkDynamicAopProxy和Cglib的Cglib2AopProxy。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">  	...</div><div class="line">	<span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</div><div class="line">			Class targetClass = config.getTargetClass();</div><div class="line">			<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</div><div class="line">						<span class="string">"Either an interface or a target is required for proxy creation."</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (targetClass.isInterface()) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!cglibAvailable) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</div><div class="line">						<span class="string">"Cannot proxy target class because CGLIB2 is not available. "</span> +</div><div class="line">						<span class="string">"Add CGLIB to the class path or specify proxy interfaces."</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> CglibProxyFactory.createCglibProxy(config);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h1><h2 id="一、PROPAGATION-TESTED（嵌套事务）"><a href="#一、PROPAGATION-TESTED（嵌套事务）" class="headerlink" title="一、PROPAGATION_TESTED（嵌套事务）"></a>一、PROPAGATION_TESTED（嵌套事务）</h2><p>  当使用PROPAGATION_NESTED时，<strong>底层的数据源必须基于JDBC3.0</strong>。因为Spring所支持的嵌套事务，是基于事务保存点实现的（<strong>JTA除外</strong>），而保存点机制是从JDBC3.0才开始出现的。直接看AbstractPlatformTransactionManager中的处理代码。对于通常的嵌套事务，会在当前所处父事务中创建保存点，然后进行子事务处理；对于JTA事务环境，则是采用嵌套的begin和commit/rollback调用来处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(</span></span></div><div class="line">		TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</div><div class="line">		<span class="keyword">throws</span> TransactionException &#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">		<span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(</div><div class="line">					<span class="string">"Transaction manager does not allow nested transactions by default - "</span> +</div><div class="line">					<span class="string">"specify 'nestedTransactionAllowed' property with value 'true'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</div><div class="line">			<span class="comment">// Create savepoint within existing Spring-managed transaction,</span></div><div class="line">			<span class="comment">// through the SavepointManager API implemented by TransactionStatus.</span></div><div class="line">			<span class="comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></div><div class="line">			DefaultTransactionStatus status =</div><div class="line">					prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			status.createAndHoldSavepoint();</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Nested transaction through nested begin and commit/rollback calls.</span></div><div class="line">			<span class="comment">// Usually only for JTA: Spring synchronization might get activated here</span></div><div class="line">			<span class="comment">// in case of a pre-existing JTA transaction.</span></div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">			DefaultTransactionStatus status = newTransactionStatus(</div><div class="line">					definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			doBegin(transaction, definition);</div><div class="line">			prepareSynchronization(status, definition);</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">     	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、获取数据连接资源"><a href="#二、获取数据连接资源" class="headerlink" title="二、获取数据连接资源"></a>二、获取数据连接资源</h2><p>  当脱离模板类，直接操作底层持久技术的原生API时，就需要通过Spring提供的资源工具类获取线程绑定的资源，而不应该直接从DataSource或SessionFactory中获取，否则容易造成<a href="https://my.oschina.net/jiangtao1314/blog/38993" target="_blank" rel="external">数据连接泄露</a>的问题。Spring为不同的持久化技术提供了一套从TransactionSynchronizationManager中获取对应线程绑定资源的工具类：DataSourceUtils（Spring JDBC或iBatis）、SessionFactoryUtils（Hibernate 3.0）等。</p>
<h2 id="三、如何标注-Transactional注解"><a href="#三、如何标注-Transactional注解" class="headerlink" title="三、如何标注@Transactional注解"></a>三、如何标注@Transactional注解</h2><p>  虽然@Transactional注解可被应用于接口、接口方法、类及类的public方法，但建议在具体实现类上使用@Transactional注解，因为<strong>接口上的注解不能被继承</strong>，这样会有隐患（关于注解的继承，可参考<a href="http://elf8848.iteye.com/blog/1621392" target="_blank" rel="external">这里</a>）。当事务配置按如下方式，使用的是子类代理（CGLib）而非接口代理（JDK）时，对应目标类不会添加事务增强！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码 </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.yangbing.club/2017/02/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Diary </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
